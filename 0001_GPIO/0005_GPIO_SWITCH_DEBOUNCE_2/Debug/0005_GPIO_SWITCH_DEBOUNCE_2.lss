
0005_GPIO_SWITCH_DEBOUNCE_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000748  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000685  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  00000f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b8  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#define BUTTON_PIN PC0 // Define the button pin

int main(void) {
    // Set the button pin as input and enable pull-up resistor
    DDRC &= ~(1 << BUTTON_PIN); // Set PC0 as input
  80:	27 b1       	in	r18, 0x07	; 7
  82:	2e 7f       	andi	r18, 0xFE	; 254
  84:	27 b9       	out	0x07, r18	; 7
    //PORTC |= (1 << BUTTON_PIN); // Enable pull-up resistor (not needed if internal pull-up is used)
    DDRD |= (1U << PB5); // Set PB5 as output for LED
  86:	2a b1       	in	r18, 0x0a	; 10
  88:	20 62       	ori	r18, 0x20	; 32
  8a:	2a b9       	out	0x0a, r18	; 10

    int currentState = 1; // Initialize as released
    int prevState = 1;    // Previous state

    int transitionCount = 0; // Count of consecutive transitions
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	70 e0       	ldi	r23, 0x00	; 0
    DDRC &= ~(1 << BUTTON_PIN); // Set PC0 as input
    //PORTC |= (1 << BUTTON_PIN); // Enable pull-up resistor (not needed if internal pull-up is used)
    DDRD |= (1U << PB5); // Set PB5 as output for LED

    int currentState = 1; // Initialize as released
    int prevState = 1;    // Previous state
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	50 e0       	ldi	r21, 0x00	; 0
    // Set the button pin as input and enable pull-up resistor
    DDRC &= ~(1 << BUTTON_PIN); // Set PC0 as input
    //PORTC |= (1 << BUTTON_PIN); // Enable pull-up resistor (not needed if internal pull-up is used)
    DDRD |= (1U << PB5); // Set PB5 as output for LED

    int currentState = 1; // Initialize as released
  94:	e1 e0       	ldi	r30, 0x01	; 1
  96:	f0 e0       	ldi	r31, 0x00	; 0
    int prevState = 1;    // Previous state

    int transitionCount = 0; // Count of consecutive transitions

    while (1) { // Infinite loop
        int buttonState = PINC & (1 << BUTTON_PIN); // Read the button state
  98:	26 b1       	in	r18, 0x06	; 6
  9a:	82 2f       	mov	r24, r18
  9c:	81 70       	andi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0

        if (buttonState != currentState) { // If there's a transition
  a0:	e8 17       	cp	r30, r24
  a2:	f9 07       	cpc	r31, r25
  a4:	99 f0       	breq	.+38     	; 0xcc <main+0x4c>
            if (buttonState == prevState) { // If the current state matches the previous state
  a6:	48 17       	cp	r20, r24
  a8:	59 07       	cpc	r21, r25
  aa:	69 f4       	brne	.+26     	; 0xc6 <main+0x46>
                transitionCount++; // Increment the transition count
  ac:	6f 5f       	subi	r22, 0xFF	; 255
  ae:	7f 4f       	sbci	r23, 0xFF	; 255
                if (transitionCount >= 3) { // If three consecutive transitions occurred
  b0:	63 30       	cpi	r22, 0x03	; 3
  b2:	71 05       	cpc	r23, r1
  b4:	5c f0       	brlt	.+22     	; 0xcc <main+0x4c>
                    // Valid transition detected, perform action
                    PORTB ^= (1 << PB5); // Toggle the LED
  b6:	35 b1       	in	r19, 0x05	; 5
  b8:	20 e2       	ldi	r18, 0x20	; 32
  ba:	23 27       	eor	r18, r19
  bc:	25 b9       	out	0x05, r18	; 5
                    currentState = buttonState; // Update the current state
  be:	fc 01       	movw	r30, r24
                    transitionCount = 0; // Reset the transition count
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	03 c0       	rjmp	.+6      	; 0xcc <main+0x4c>
                }
            } else { // If the current state doesn't match the previous state
                // Reset the transition count
                transitionCount = 0;
                prevState = buttonState; // Update the previous state
  c6:	ac 01       	movw	r20, r24
                    currentState = buttonState; // Update the current state
                    transitionCount = 0; // Reset the transition count
                }
            } else { // If the current state doesn't match the previous state
                // Reset the transition count
                transitionCount = 0;
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	af e3       	ldi	r26, 0x3F	; 63
  ce:	bc e9       	ldi	r27, 0x9C	; 156
  d0:	11 97       	sbiw	r26, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x50>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x56>
  d6:	00 00       	nop
  d8:	df cf       	rjmp	.-66     	; 0x98 <main+0x18>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
