
0005b_External_Interrupt_INT0_High_level.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d3  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  000008af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000247  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036e  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  000014fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000153a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <externalInterruptInit>:
#define LED_PIN PB5    // Pin where the LED is connected

// Function to initialize external interrupt INT0
void externalInterruptInit() {
    // Set the BUTTON_PIN (PD2) as input
    DDRD &= ~(1 << BUTTON_PIN);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8b 7f       	andi	r24, 0xFB	; 251
  84:	8a b9       	out	0x0a, r24	; 10

    // Enable the internal pull-up resistor for the BUTTON_PIN
    PORTD |= (1 << BUTTON_PIN);
  86:	8b b1       	in	r24, 0x0b	; 11
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	8b b9       	out	0x0b, r24	; 11

    // Configure the external interrupt INT0 to trigger on rising edge (high level)
    EICRA |= (1 << ISC01) | (1 << ISC00);  // Trigger on rising edge
  8c:	e9 e6       	ldi	r30, 0x69	; 105
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	83 60       	ori	r24, 0x03	; 3
  94:	80 83       	st	Z, r24
    EIMSK |= (1 << INT0);   // Enable INT0 interrupt
  96:	8d b3       	in	r24, 0x1d	; 29
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	8d bb       	out	0x1d, r24	; 29
  9c:	08 95       	ret

0000009e <ledInit>:
}

// Function to initialize the LED pin
void ledInit() {
    // Set the LED_PIN (PB5) as an output
    DDRB |= (1 << LED_PIN);
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	84 b9       	out	0x04, r24	; 4
  a4:	08 95       	ret

000000a6 <main>:
}

int main(void) {
    externalInterruptInit(); // Initialize external interrupt
  a6:	0e 94 40 00 	call	0x80	; 0x80 <externalInterruptInit>
    ledInit();               // Initialize LED pin
  aa:	0e 94 4f 00 	call	0x9e	; 0x9e <ledInit>

    // Enable global interrupts
    sei();
  ae:	78 94       	sei
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0xa>

000000b2 <__vector_1>:
    }
    return 0;
}

// External interrupt service routine for INT0
ISR(INT0_vect) {
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
    // Check if the button is released (high level)
    if (PIND & (1 << BUTTON_PIN)) {
  be:	4a 9b       	sbis	0x09, 2	; 9
  c0:	04 c0       	rjmp	.+8      	; 0xca <__vector_1+0x18>
        // Button is released; turn on the LED
        PORTB |= (1 << LED_PIN);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <__vector_1+0x1e>
    } else {
        // Button is pressed; turn off the LED
        PORTB &= ~(1 << LED_PIN);
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	8f 7d       	andi	r24, 0xDF	; 223
  ce:	85 b9       	out	0x05, r24	; 5
    }
}
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
