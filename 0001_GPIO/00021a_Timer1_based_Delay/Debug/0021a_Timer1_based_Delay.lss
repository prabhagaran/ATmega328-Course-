
0021a_Timer1_based_Delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e1  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000643  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000233  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer1_delay_ms>:
#include <avr/io.h>
#include <util/delay.h>

void timer1_delay_ms(uint16_t milliseconds) {
	// Set Timer/Counter1 to CTC (Clear Timer on Compare Match) mode
	TCCR1B |= (1 << WGM12);
  80:	e1 e8       	ldi	r30, 0x81	; 129
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	20 81       	ld	r18, Z
  86:	28 60       	ori	r18, 0x08	; 8
  88:	20 83       	st	Z, r18
	
	// Calculate the value to load into the OCR1A register
	// Formula: (F_CPU / (prescaler * 1000)) * milliseconds - 1
	// For example, with a 16MHz clock, a prescaler of 64, and 1000ms delay:
	// OCR1A = (16000000 / (64 * 1000)) - 1 = 249
	OCR1A = (F_CPU / 64 / 1000) * milliseconds - 1;
  8a:	2a ef       	ldi	r18, 0xFA	; 250
  8c:	ac 01       	movw	r20, r24
  8e:	24 9f       	mul	r18, r20
  90:	c0 01       	movw	r24, r0
  92:	25 9f       	mul	r18, r21
  94:	90 0d       	add	r25, r0
  96:	11 24       	eor	r1, r1
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  9e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Set prescaler to 64 (you can adjust this as needed)
	TCCR1B |= (1 << CS11) | (1 << CS10);
  a2:	80 81       	ld	r24, Z
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	80 83       	st	Z, r24
	
	// Clear the timer register
	TCNT1 = 0;
  a8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	// Wait until the OCF1A flag is set (indicating the desired delay has passed)
	while (!(TIFR1 & (1 << OCF1A)));
  b0:	b1 9b       	sbis	0x16, 1	; 22
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <timer1_delay_ms+0x30>
	
	// Clear the OCF1A flag by writing a 1 to it
	TIFR1 |= (1 << OCF1A);
  b4:	86 b3       	in	r24, 0x16	; 22
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	86 bb       	out	0x16, r24	; 22
  ba:	08 95       	ret

000000bc <main>:
}

int main() {
	// Initialize your hardware or set up the microcontroller as needed
	
	DDRB |= (1 << PB5);
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	84 b9       	out	0x04, r24	; 4
	

	while (1) {
		// Your code here

        PORTB |= (1 << PB5);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	85 b9       	out	0x05, r24	; 5
		// Use the timer1-based delay function
		timer1_delay_ms(2000);  // Delay for 1 second
  c8:	80 ed       	ldi	r24, 0xD0	; 208
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	0e 94 40 00 	call	0x80	; 0x80 <timer1_delay_ms>
		PORTB &= ~(1 << PB5);
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8f 7d       	andi	r24, 0xDF	; 223
  d4:	85 b9       	out	0x05, r24	; 5
		timer1_delay_ms(2000); 
  d6:	80 ed       	ldi	r24, 0xD0	; 208
  d8:	97 e0       	ldi	r25, 0x07	; 7
  da:	0e 94 40 00 	call	0x80	; 0x80 <timer1_delay_ms>
  de:	f1 cf       	rjmp	.-30     	; 0xc2 <main+0x6>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
