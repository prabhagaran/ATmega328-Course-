
0006d_GPIO_4_WAY_TRAFFIC_LIGHT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000867  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069e  00000000  00000000  00000adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a8  00000000  00000000  0000117d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  78:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <all_led_off>:
}

// Function to turn on all LEDs
void all_led_on(void) {
    PORTD |= ((1 << N_RED_LED) | (1 << N_YELLOW_LED) | (1 << N_GREEN_LED) | (1 << S_RED_LED) | (1 << S_YELLOW_LED) | (1 << S_GREEN_LED));
    PORTB |= ((1 << E_RED_LED) | (1 << E_YELLOW_LED) | (1 << E_GREEN_LED) | (1 << W_RED_LED) | (1 << W_YELLOW_LED) | (1 << W_GREEN_LED));
  80:	8b b1       	in	r24, 0x0b	; 11
  82:	83 70       	andi	r24, 0x03	; 3
  84:	8b b9       	out	0x0b, r24	; 11
  86:	85 b1       	in	r24, 0x05	; 5
  88:	80 7c       	andi	r24, 0xC0	; 192
  8a:	85 b9       	out	0x05, r24	; 5
  8c:	08 95       	ret

0000008e <main>:
}

int main(void) {
    // Set all LED pins as outputs
    DDRD |= (1 << N_RED_LED) | (1 << N_YELLOW_LED) | (1 << N_GREEN_LED) | (1 << S_RED_LED) | (1 << S_YELLOW_LED) | (1 << S_GREEN_LED);
  8e:	8a b1       	in	r24, 0x0a	; 10
  90:	8c 6f       	ori	r24, 0xFC	; 252
  92:	8a b9       	out	0x0a, r24	; 10
    DDRB |= (1 << E_RED_LED) | (1 << E_YELLOW_LED) | (1 << E_GREEN_LED) | (1 << W_RED_LED) | (1 << W_YELLOW_LED) | (1 << W_GREEN_LED);
  94:	84 b1       	in	r24, 0x04	; 4
  96:	8f 63       	ori	r24, 0x3F	; 63
  98:	84 b9       	out	0x04, r24	; 4
	
    while (1) {
        // North-South Green, East-West Red
        all_led_off();
  9a:	0e 94 40 00 	call	0x80	; 0x80 <all_led_off>
        PORTB |= (1 << E_GREEN_LED);
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	85 b9       	out	0x05, r24	; 5
        PORTB |= (1 << W_RED_LED);
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	85 b9       	out	0x05, r24	; 5
        PORTD |= (1 << N_RED_LED);
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	80 61       	ori	r24, 0x10	; 16
  ae:	8b b9       	out	0x0b, r24	; 11
        PORTD |= (1 << S_RED_LED);
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	8b e7       	ldi	r24, 0x7B	; 123
  ba:	92 e9       	ldi	r25, 0x92	; 146
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x2e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x38>
  c6:	00 00       	nop
        _delay_ms(3000);

        // North-South Yellow, East-West Red
        PORTB |= (1 << E_YELLOW_LED);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	85 b9       	out	0x05, r24	; 5
        PORTD |= (1 << N_YELLOW_LED);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	87 ea       	ldi	r24, 0xA7	; 167
  d8:	91 e6       	ldi	r25, 0x61	; 97
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x4c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x56>
  e4:	00 00       	nop
        _delay_ms(2000);

        // North-South Red, East-West Green
        all_led_off();
  e6:	0e 94 40 00 	call	0x80	; 0x80 <all_led_off>
        PORTD |= (1 << N_GREEN_LED);
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	8b b9       	out	0x0b, r24	; 11
        PORTD |= (1 << S_RED_LED);
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	8b b9       	out	0x0b, r24	; 11
        PORTB |= (1 << E_RED_LED);
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	85 b9       	out	0x05, r24	; 5
        PORTB |= (1 << W_RED_LED);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	85 b9       	out	0x05, r24	; 5
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	8b e7       	ldi	r24, 0x7B	; 123
 106:	92 e9       	ldi	r25, 0x92	; 146
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x7a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x84>
 112:	00 00       	nop
        _delay_ms(3000);

        // North-South Yellow, East-West Red
        PORTB |= (1 << W_YELLOW_LED);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	80 61       	ori	r24, 0x10	; 16
 118:	85 b9       	out	0x05, r24	; 5
        PORTD |= (1 << N_YELLOW_LED);
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	88 60       	ori	r24, 0x08	; 8
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	87 ea       	ldi	r24, 0xA7	; 167
 124:	91 e6       	ldi	r25, 0x61	; 97
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x98>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xa2>
 130:	00 00       	nop
        _delay_ms(2000);

        // North-South Red, East-West Green
        all_led_off();
 132:	0e 94 40 00 	call	0x80	; 0x80 <all_led_off>
        PORTB |= (1 << W_GREEN_LED);
 136:	85 b1       	in	r24, 0x05	; 5
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	85 b9       	out	0x05, r24	; 5
        PORTB |= (1 << E_RED_LED);
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	84 60       	ori	r24, 0x04	; 4
 140:	85 b9       	out	0x05, r24	; 5
        PORTD |= (1 << N_RED_LED);
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	80 61       	ori	r24, 0x10	; 16
 146:	8b b9       	out	0x0b, r24	; 11
        PORTD |= (1 << S_RED_LED);
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	8b e7       	ldi	r24, 0x7B	; 123
 152:	92 e9       	ldi	r25, 0x92	; 146
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0xc6>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xd0>
 15e:	00 00       	nop
        _delay_ms(3000);

        // North-South Yellow, East-West Red
        PORTB |= (1 << E_YELLOW_LED);
 160:	85 b1       	in	r24, 0x05	; 5
 162:	82 60       	ori	r24, 0x02	; 2
 164:	85 b9       	out	0x05, r24	; 5
        PORTD |= (1 << S_YELLOW_LED);
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	87 ea       	ldi	r24, 0xA7	; 167
 170:	91 e6       	ldi	r25, 0x61	; 97
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0xe4>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xee>
 17c:	00 00       	nop
 17e:	8d cf       	rjmp	.-230    	; 0x9a <main+0xc>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
