
0016_UART_RECEIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007aa  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c5  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  000010c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d1  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000054  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  78:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <uart_Init>:
#include <util/delay.h>

void uart_Init(uint32_t baud_rate)
{
	/*Calculate the baudrate*/
	uint16_t ubrr = (F_CPU / (16 * baud_rate)) - 1;
  80:	dc 01       	movw	r26, r24
  82:	cb 01       	movw	r24, r22
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	aa 1f       	adc	r26, r26
  8a:	bb 1f       	adc	r27, r27
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	aa 1f       	adc	r26, r26
  92:	bb 1f       	adc	r27, r27
  94:	9c 01       	movw	r18, r24
  96:	ad 01       	movw	r20, r26
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	44 1f       	adc	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	44 1f       	adc	r20, r20
  a6:	55 1f       	adc	r21, r21
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	74 e2       	ldi	r23, 0x24	; 36
  ac:	84 ef       	ldi	r24, 0xF4	; 244
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 8d 00 	call	0x11a	; 0x11a <__udivmodsi4>
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	31 09       	sbc	r19, r1
	
	UBRR0H = (uint8_t)(ubrr >> 8);
  b8:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)ubrr;
  bc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/*Enable Transmitter and Receiver*/
	UCSR0B = (1U << RXEN0) | (1U << TXEN0);
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	/*Set data Frame 8bits 1 stop bits */
	UCSR0C = (1U << UCSZ01) |(1U << UCSZ00);
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  cc:	08 95       	ret

000000ce <uart_Transmit_9bit>:
	//UCSR0B = (1U << UCSZ02);
	
}

void uart_Transmit_9bit(uint16_t data) {
  ce:	9c 01       	movw	r18, r24
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0)))
  d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d4:	95 ff       	sbrs	r25, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <uart_Transmit_9bit+0x2>
	;
	
	/* Copy 9th bit to TXB8 */
	UCSR0B &= ~(1 << TXB80);  // Clear TXB8 bit
  d8:	e1 ec       	ldi	r30, 0xC1	; 193
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	9e 7f       	andi	r25, 0xFE	; 254
  e0:	90 83       	st	Z, r25

	if (data & 0x0100)
  e2:	30 ff       	sbrs	r19, 0
  e4:	03 c0       	rjmp	.+6      	; 0xec <uart_Transmit_9bit+0x1e>
	UCSR0B |= (1 << TXB80);  // Set TXB8 bit if the 9th bit of data is set
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24

	/* Put data into buffer, sends the data */
	UDR0 = data;
  ec:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f0:	08 95       	ret

000000f2 <main>:
}

int main(void) {
	// Initialize UART with a baud rate (e.g., 9600 bps)

	uart_Init(9600);
  f2:	60 e8       	ldi	r22, 0x80	; 128
  f4:	75 e2       	ldi	r23, 0x25	; 37
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 40 00 	call	0x80	; 0x80 <uart_Init>

	while (1) {
		// Transmit a 9-bit data frame (0x1FF in this example)
		uart_Transmit_9bit(0x1FF);
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	0e 94 67 00 	call	0xce	; 0xce <uart_Transmit_9bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	83 ed       	ldi	r24, 0xD3	; 211
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x1a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x24>
 116:	00 00       	nop
 118:	f2 cf       	rjmp	.-28     	; 0xfe <main+0xc>

0000011a <__udivmodsi4>:
 11a:	a1 e2       	ldi	r26, 0x21	; 33
 11c:	1a 2e       	mov	r1, r26
 11e:	aa 1b       	sub	r26, r26
 120:	bb 1b       	sub	r27, r27
 122:	fd 01       	movw	r30, r26
 124:	0d c0       	rjmp	.+26     	; 0x140 <__udivmodsi4_ep>

00000126 <__udivmodsi4_loop>:
 126:	aa 1f       	adc	r26, r26
 128:	bb 1f       	adc	r27, r27
 12a:	ee 1f       	adc	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	a2 17       	cp	r26, r18
 130:	b3 07       	cpc	r27, r19
 132:	e4 07       	cpc	r30, r20
 134:	f5 07       	cpc	r31, r21
 136:	20 f0       	brcs	.+8      	; 0x140 <__udivmodsi4_ep>
 138:	a2 1b       	sub	r26, r18
 13a:	b3 0b       	sbc	r27, r19
 13c:	e4 0b       	sbc	r30, r20
 13e:	f5 0b       	sbc	r31, r21

00000140 <__udivmodsi4_ep>:
 140:	66 1f       	adc	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	88 1f       	adc	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	1a 94       	dec	r1
 14a:	69 f7       	brne	.-38     	; 0x126 <__udivmodsi4_loop>
 14c:	60 95       	com	r22
 14e:	70 95       	com	r23
 150:	80 95       	com	r24
 152:	90 95       	com	r25
 154:	9b 01       	movw	r18, r22
 156:	ac 01       	movw	r20, r24
 158:	bd 01       	movw	r22, r26
 15a:	cf 01       	movw	r24, r30
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
