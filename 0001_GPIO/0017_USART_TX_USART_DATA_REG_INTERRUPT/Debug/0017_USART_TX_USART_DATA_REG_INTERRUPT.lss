
0017_USART_TX_USART_DATA_REG_INTERRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000228  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081a  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00000aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ea  00000000  00000000  00001202  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000014ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f8  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fa  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  88:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <uart_Init>:
volatile uint8_t usart_transmitBuffer;

// Function to initialize UART communication with specified baud rate
void uart_Init(uint32_t baudRate)
{
    uint16_t ubrr = (F_CPU / (16 * baudRate)) - 1;
  90:	dc 01       	movw	r26, r24
  92:	cb 01       	movw	r24, r22
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	aa 1f       	adc	r26, r26
  9a:	bb 1f       	adc	r27, r27
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	aa 1f       	adc	r26, r26
  a2:	bb 1f       	adc	r27, r27
  a4:	9c 01       	movw	r18, r24
  a6:	ad 01       	movw	r20, r26
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	44 1f       	adc	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	44 1f       	adc	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	74 e2       	ldi	r23, 0x24	; 36
  bc:	84 ef       	ldi	r24, 0xF4	; 244
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 b6 00 	call	0x16c	; 0x16c <__udivmodsi4>
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	31 09       	sbc	r19, r1
    
    UBRR0H = (uint8_t)(ubrr >> 8);
  c8:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (uint8_t)ubrr;
  cc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    
    /* Enable Transmitter and Receiver */
    UCSR0B = (1U << RXEN0) | (1U << TXEN0);
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    
    /* Set Data frame */
    UCSR0C = (1U << UCSZ01) | (1U << UCSZ00);
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    
    sei(); // Enable global interrupts
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <usart_TransmissionaInterrupt>:
}

// Function to transmit data via UART using interrupt
void usart_TransmissionaInterrupt(uint8_t data)
{
    usart_transmitBuffer = data;
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    UCSR0B |= (1U << UDRIE0); // Enable USART Data Register Empty Interrupt
  e4:	e1 ec       	ldi	r30, 0xC1	; 193
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <main>:
}

int main(void)
{
    DDRB |= (1U << PB5); // Set PB5 as output for LED
  f0:	84 b1       	in	r24, 0x04	; 4
  f2:	80 62       	ori	r24, 0x20	; 32
  f4:	84 b9       	out	0x04, r24	; 4
    
    uart_Init(9600); // Initialize UART with baud rate of 9600
  f6:	60 e8       	ldi	r22, 0x80	; 128
  f8:	75 e2       	ldi	r23, 0x25	; 37
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 48 00 	call	0x90	; 0x90 <uart_Init>
    uint8_t local_data = 'a';
    usart_TransmissionaInterrupt(local_data); // Transmit 'a' using interrupt
 102:	81 e6       	ldi	r24, 0x61	; 97
 104:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_TransmissionaInterrupt>
    
    while (1) 
    {
        // Toggle LED connected to PB5
        PORTB |= (1U << PB5);
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	89 e6       	ldi	r24, 0x69	; 105
 112:	98 e1       	ldi	r25, 0x18	; 24
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x24>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x2e>
 11e:	00 00       	nop
        _delay_ms(500);
        PORTB &= ~(1U << PB5);
 120:	85 b1       	in	r24, 0x05	; 5
 122:	8f 7d       	andi	r24, 0xDF	; 223
 124:	85 b9       	out	0x05, r24	; 5
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	89 e6       	ldi	r24, 0x69	; 105
 12a:	98 e1       	ldi	r25, 0x18	; 24
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x3c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x46>
 136:	00 00       	nop
 138:	e7 cf       	rjmp	.-50     	; 0x108 <main+0x18>

0000013a <__vector_19>:
    }
}

// USART Data Register Empty Interrupt Service Routine
ISR(USART_UDRE_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
    // Transmit data from buffer
    UDR0 = usart_transmitBuffer;
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    
    // Disable USART Data Register Empty Interrupt
    UCSR0B &= ~(1U << UDRIE0);
 152:	e1 ec       	ldi	r30, 0xC1	; 193
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	8f 7d       	andi	r24, 0xDF	; 223
 15a:	80 83       	st	Z, r24
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <__udivmodsi4>:
 16c:	a1 e2       	ldi	r26, 0x21	; 33
 16e:	1a 2e       	mov	r1, r26
 170:	aa 1b       	sub	r26, r26
 172:	bb 1b       	sub	r27, r27
 174:	fd 01       	movw	r30, r26
 176:	0d c0       	rjmp	.+26     	; 0x192 <__udivmodsi4_ep>

00000178 <__udivmodsi4_loop>:
 178:	aa 1f       	adc	r26, r26
 17a:	bb 1f       	adc	r27, r27
 17c:	ee 1f       	adc	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	a2 17       	cp	r26, r18
 182:	b3 07       	cpc	r27, r19
 184:	e4 07       	cpc	r30, r20
 186:	f5 07       	cpc	r31, r21
 188:	20 f0       	brcs	.+8      	; 0x192 <__udivmodsi4_ep>
 18a:	a2 1b       	sub	r26, r18
 18c:	b3 0b       	sbc	r27, r19
 18e:	e4 0b       	sbc	r30, r20
 190:	f5 0b       	sbc	r31, r21

00000192 <__udivmodsi4_ep>:
 192:	66 1f       	adc	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	88 1f       	adc	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	1a 94       	dec	r1
 19c:	69 f7       	brne	.-38     	; 0x178 <__udivmodsi4_loop>
 19e:	60 95       	com	r22
 1a0:	70 95       	com	r23
 1a2:	80 95       	com	r24
 1a4:	90 95       	com	r25
 1a6:	9b 01       	movw	r18, r22
 1a8:	ac 01       	movw	r20, r24
 1aa:	bd 01       	movw	r22, r26
 1ac:	cf 01       	movw	r24, r30
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
