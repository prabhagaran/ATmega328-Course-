
0021_8bit_Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069b  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  00000837  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000221  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Timer0>:
	}
	return 0;
}

void Timer0(void){
	TCNT0 = 50;    //load the TCNT0 with 206 for 50us delay
  80:	82 e3       	ldi	r24, 0x32	; 50
  82:	86 bd       	out	0x26, r24	; 38

	//for normal mode operation and pre-scalar of 8
	TCCR0A = 0x00;
  84:	14 bc       	out	0x24, r1	; 36
	TCCR0B =  (1U << CS02) | (1U << CS00); // FOC0A | FOC0B | - | - | WGM02 | CS02 | CS01 | CS00
  86:	85 e0       	ldi	r24, 0x05	; 5
  88:	85 bd       	out	0x25, r24	; 37
	
	while((TIFR0 & (1<<TOV0)) == 0);
  8a:	a8 9b       	sbis	0x15, 0	; 21
  8c:	fe cf       	rjmp	.-4      	; 0x8a <Timer0+0xa>
	TCCR0B = 0x00;
  8e:	15 bc       	out	0x25, r1	; 37
	TIFR0 |= (1U << TOV0);
  90:	85 b3       	in	r24, 0x15	; 21
  92:	81 60       	ori	r24, 0x01	; 1
  94:	85 bb       	out	0x15, r24	; 21
  96:	08 95       	ret

00000098 <main>:
void Timer0(void);  //function prototype

int main()
{
	
	DDRB |= (1<<PB5);    //for LED output
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	84 b9       	out	0x04, r24	; 4
	
	while (1){
		PORTB ^= (1<<PB5);    //toggle PORT B pin 0
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	80 e2       	ldi	r24, 0x20	; 32
  a2:	89 27       	eor	r24, r25
  a4:	85 b9       	out	0x05, r24	; 5
		Timer0();
  a6:	0e 94 40 00 	call	0x80	; 0x80 <Timer0>
  aa:	f9 cf       	rjmp	.-14     	; 0x9e <main+0x6>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
