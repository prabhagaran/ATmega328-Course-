
0022_CTC_MODE_USING_POLLING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069c  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061b  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000211  00000000  00000000  00000e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000341  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000013d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <CTC_MODE>:

// Function to set up CTC mode for generating square wave
void CTC_MODE(void)
{
	// Set the value for output compare register for desired frequency
	OCR0A = 249; // For 1kHz square wave at 16MHz clock
  80:	89 ef       	ldi	r24, 0xF9	; 249
  82:	87 bd       	out	0x27, r24	; 39
	
	// Configure Timer/Counter Control Registers for CTC mode and toggle OC0A on compare match
	TCCR0A |= (1 << COM0A0) | (1 << WGM01);
  84:	84 b5       	in	r24, 0x24	; 36
  86:	82 64       	ori	r24, 0x42	; 66
  88:	84 bd       	out	0x24, r24	; 36
	// Set prescaler to 8
	TCCR0B |= (1 << CS01);
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	85 bd       	out	0x25, r24	; 37
	
	// Poll until the output compare flag is set
	while(!(TIFR0 & (1 << OCF0A))) {}
  90:	a9 9b       	sbis	0x15, 1	; 21
  92:	fe cf       	rjmp	.-4      	; 0x90 <CTC_MODE+0x10>
	// Clear the output compare flag
	TIFR0 = (1 << OCF0A);
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	85 bb       	out	0x15, r24	; 21
  98:	08 95       	ret

0000009a <main>:

int main(void)
{
    /* Replace with your application code */
	// Set PD6 as output pin for generating square wave
	DDRD |= (1 << PD6);
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8a b9       	out	0x0a, r24	; 10
    
    while (1) 
    {
		// Call CTC_MODE function to generate square wave
		CTC_MODE();
  a0:	0e 94 40 00 	call	0x80	; 0x80 <CTC_MODE>
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <main+0x6>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
