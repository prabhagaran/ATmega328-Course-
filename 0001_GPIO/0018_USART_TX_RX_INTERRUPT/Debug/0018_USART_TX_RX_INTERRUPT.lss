
0018_USART_TX_RX_INTERRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000825  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074a  00000000  00000000  00000a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  000011d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b0  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000199f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_clear_bss>:
  68:	21 e0       	ldi	r18, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	a0 30       	cpi	r26, 0x00	; 0
  74:	b2 07       	cpc	r27, r18
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <uartInit>:

uint8_t receiverbuffer;

void uartInit(uint32_t baudRate)
{
	uint16_t ubrr = (F_CPU / ( 16 * baudRate)) - 1;
  84:	dc 01       	movw	r26, r24
  86:	cb 01       	movw	r24, r22
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	aa 1f       	adc	r26, r26
  8e:	bb 1f       	adc	r27, r27
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	aa 1f       	adc	r26, r26
  96:	bb 1f       	adc	r27, r27
  98:	9c 01       	movw	r18, r24
  9a:	ad 01       	movw	r20, r26
  9c:	22 0f       	add	r18, r18
  9e:	33 1f       	adc	r19, r19
  a0:	44 1f       	adc	r20, r20
  a2:	55 1f       	adc	r21, r21
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	44 1f       	adc	r20, r20
  aa:	55 1f       	adc	r21, r21
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	74 e2       	ldi	r23, 0x24	; 36
  b0:	84 ef       	ldi	r24, 0xF4	; 244
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 94 00 	call	0x128	; 0x128 <__udivmodsi4>
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
	
	UBRR0H = (uint8_t)(ubrr >> 8);
  bc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)ubrr;
  c0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//set data frame
	
	UCSR0C = (1U << UCSZ01) | (1 << UCSZ00);
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	//Enable Receiver and Transmitter
	UCSR0B = (1U << TXEN0) | (1U << RXEN0);
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	sei();
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <main>:
}

int main(void)
{
    /* Replace with your application code */
	DDRB |= (1U << PB5);
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1U << PB4);
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	84 b9       	out	0x04, r24	; 4
	uartInit(9600);
  e0:	60 e8       	ldi	r22, 0x80	; 128
  e2:	75 e2       	ldi	r23, 0x25	; 37
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 42 00 	call	0x84	; 0x84 <uartInit>
	UCSR0B |= (1U << RXCIE0);
  ec:	e1 ec       	ldi	r30, 0xC1	; 193
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	80 83       	st	Z, r24
	
    while (1) 
    {
		PORTB |= (1U << PB4);
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	80 61       	ori	r24, 0x10	; 16
  fa:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	89 e6       	ldi	r24, 0x69	; 105
 100:	98 e1       	ldi	r25, 0x18	; 24
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x2e>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x38>
 10c:	00 00       	nop
		_delay_ms(500);
		PORTB &= ~(1U << PB4);
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8f 7e       	andi	r24, 0xEF	; 239
 112:	85 b9       	out	0x05, r24	; 5
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	89 e6       	ldi	r24, 0x69	; 105
 118:	98 e1       	ldi	r25, 0x18	; 24
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x46>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x50>
 124:	00 00       	nop
 126:	e7 cf       	rjmp	.-50     	; 0xf6 <main+0x22>

00000128 <__udivmodsi4>:
 128:	a1 e2       	ldi	r26, 0x21	; 33
 12a:	1a 2e       	mov	r1, r26
 12c:	aa 1b       	sub	r26, r26
 12e:	bb 1b       	sub	r27, r27
 130:	fd 01       	movw	r30, r26
 132:	0d c0       	rjmp	.+26     	; 0x14e <__udivmodsi4_ep>

00000134 <__udivmodsi4_loop>:
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	ee 1f       	adc	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	a2 17       	cp	r26, r18
 13e:	b3 07       	cpc	r27, r19
 140:	e4 07       	cpc	r30, r20
 142:	f5 07       	cpc	r31, r21
 144:	20 f0       	brcs	.+8      	; 0x14e <__udivmodsi4_ep>
 146:	a2 1b       	sub	r26, r18
 148:	b3 0b       	sbc	r27, r19
 14a:	e4 0b       	sbc	r30, r20
 14c:	f5 0b       	sbc	r31, r21

0000014e <__udivmodsi4_ep>:
 14e:	66 1f       	adc	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	88 1f       	adc	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	1a 94       	dec	r1
 158:	69 f7       	brne	.-38     	; 0x134 <__udivmodsi4_loop>
 15a:	60 95       	com	r22
 15c:	70 95       	com	r23
 15e:	80 95       	com	r24
 160:	90 95       	com	r25
 162:	9b 01       	movw	r18, r22
 164:	ac 01       	movw	r20, r24
 166:	bd 01       	movw	r22, r26
 168:	cf 01       	movw	r24, r30
 16a:	08 95       	ret

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
