
0003_GPIO_LED_CHASER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079c  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b7  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a8  00000000  00000000  00001097  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

int n = 6; // Initialize variable n with value 6

int main(void) {
    // Set pins 8 to 13 as outputs (PORTB, Pins 0 to 5)
    DDRB |= 0b00111111;
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8f 63       	ori	r24, 0x3F	; 63
  9a:	84 b9       	out	0x04, r24	; 4

    while (1) { // Infinite loop

        for(int i = 0; i < n; ++i) { // Loop from 0 to n-1
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	23 c0       	rjmp	.+70     	; 0xe8 <main+0x52>
            PORTB |= (1U << i); // Set the ith bit of PORTB to turn on the corresponding pin
  a2:	65 b1       	in	r22, 0x05	; 5
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	ac 01       	movw	r20, r24
  aa:	02 2e       	mov	r0, r18
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <main+0x1c>
  ae:	44 0f       	add	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <main+0x18>
  b6:	46 2b       	or	r20, r22
  b8:	45 b9       	out	0x05, r20	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	4f ef       	ldi	r20, 0xFF	; 255
  bc:	53 ec       	ldi	r21, 0xC3	; 195
  be:	69 e0       	ldi	r22, 0x09	; 9
  c0:	41 50       	subi	r20, 0x01	; 1
  c2:	50 40       	sbci	r21, 0x00	; 0
  c4:	60 40       	sbci	r22, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2a>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x34>
  ca:	00 00       	nop
            _delay_ms(200); // Delay for 200 milliseconds
            PORTB &= ~(1U << (i - 1)); // Clear the (i-1)th bit of PORTB to turn off the previous pin
  cc:	45 b1       	in	r20, 0x05	; 5
  ce:	b9 01       	movw	r22, r18
  d0:	61 50       	subi	r22, 0x01	; 1
  d2:	71 09       	sbc	r23, r1
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x44>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <main+0x40>
  de:	80 95       	com	r24
  e0:	84 23       	and	r24, r20
  e2:	85 b9       	out	0x05, r24	; 5
    // Set pins 8 to 13 as outputs (PORTB, Pins 0 to 5)
    DDRB |= 0b00111111;

    while (1) { // Infinite loop

        for(int i = 0; i < n; ++i) { // Loop from 0 to n-1
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	28 17       	cp	r18, r24
  f2:	39 07       	cpc	r19, r25
  f4:	b4 f2       	brlt	.-84     	; 0xa2 <main+0xc>
            PORTB |= (1U << i); // Set the ith bit of PORTB to turn on the corresponding pin
            _delay_ms(200); // Delay for 200 milliseconds
            PORTB &= ~(1U << (i - 1)); // Clear the (i-1)th bit of PORTB to turn off the previous pin
        }

        n--; // Decrement n
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

        if(n == 0) { // If n reaches 0
 100:	89 2b       	or	r24, r25
 102:	61 f6       	brne	.-104    	; 0x9c <main+0x6>
            n = 6; // Reset n to 6
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	93 ec       	ldi	r25, 0xC3	; 195
 114:	29 e0       	ldi	r18, 0x09	; 9
 116:	81 50       	subi	r24, 0x01	; 1
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	20 40       	sbci	r18, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x80>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x8a>
 120:	00 00       	nop
            _delay_ms(200); // Delay for 200 milliseconds
            PORTB &= ~0b11111111; // Turn off all pins on PORTB
 122:	85 b1       	in	r24, 0x05	; 5
 124:	15 b8       	out	0x05, r1	; 5
 126:	4f ef       	ldi	r20, 0xFF	; 255
 128:	53 ec       	ldi	r21, 0xC3	; 195
 12a:	69 e0       	ldi	r22, 0x09	; 9
 12c:	41 50       	subi	r20, 0x01	; 1
 12e:	50 40       	sbci	r21, 0x00	; 0
 130:	60 40       	sbci	r22, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x96>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xa0>
 136:	00 00       	nop
 138:	b1 cf       	rjmp	.-158    	; 0x9c <main+0x6>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
