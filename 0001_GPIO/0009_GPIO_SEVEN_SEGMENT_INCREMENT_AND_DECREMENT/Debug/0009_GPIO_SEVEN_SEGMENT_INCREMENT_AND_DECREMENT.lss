
0009_GPIO_SEVEN_SEGMENT_INCREMENT_AND_DECREMENT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000009fe  00000a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  00000aa0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000afc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a11  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085b  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000638  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00002450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000347  00000000  00000000  000029aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002cf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	6d 00       	.word	0x006d	; ????
  6a:	80 00       	.word	0x0080	; ????
  6c:	87 00       	.word	0x0087	; ????
  6e:	97 00       	.word	0x0097	; ????
  70:	a7 00       	.word	0x00a7	; ????
  72:	b4 00       	.word	0x00b4	; ????
  74:	c4 00       	.word	0x00c4	; ????
  76:	d7 00       	.word	0x00d7	; ????
  78:	e1 00       	.word	0x00e1	; ????
  7a:	f7 00       	.word	0x00f7	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee ef       	ldi	r30, 0xFE	; 254
  90:	f9 e0       	ldi	r31, 0x09	; 9
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 30       	cpi	r26, 0x0E	; 14
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	ae e0       	ldi	r26, 0x0E	; 14
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a0 31       	cpi	r26, 0x10	; 16
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  b2:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <all_segment_off>:
#define SEG_DP_PIN      PB3
int count = 0;

void all_segment_off(void)
{
	PORTD |= (1U << SEG_A_PIN) | (1U <<SEG_B_PIN) |(1U << SEG_C_PIN) | (1U << SEG_D_PIN) | (1U << SEG_E_PIN) | (1U << SEG_F_PIN);
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	83 6f       	ori	r24, 0xF3	; 243
  be:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1U << SEG_G_PIN) | (1U << SEG_DP_PIN);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	8c 60       	ori	r24, 0x0C	; 12
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	08 95       	ret

000000c8 <printNumbers>:
}

void printNumbers(int num)
{
	switch (num)
  c8:	8a 30       	cpi	r24, 0x0A	; 10
  ca:	91 05       	cpc	r25, r1
  cc:	08 f0       	brcs	.+2      	; 0xd0 <printNumbers+0x8>
  ce:	a2 c0       	rjmp	.+324    	; 0x214 <printNumbers+0x14c>
  d0:	fc 01       	movw	r30, r24
  d2:	ec 5c       	subi	r30, 0xCC	; 204
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__tablejump2__>
	{
		case 0:
				PORTD &= ~(1U << SEG_A_PIN);
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	8f 7e       	andi	r24, 0xEF	; 239
  de:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~(1U << SEG_B_PIN);
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	8f 7d       	andi	r24, 0xDF	; 223
  e4:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~(1U << SEG_C_PIN);
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	8f 7b       	andi	r24, 0xBF	; 191
  ea:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~(1U << SEG_D_PIN);
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8f 77       	andi	r24, 0x7F	; 127
  f0:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~(1U << SEG_E_PIN);
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~(1U << SEG_F_PIN);
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	8d 7f       	andi	r24, 0xFD	; 253
  fc:	8b b9       	out	0x0b, r24	; 11
				break;	
  fe:	08 95       	ret
		case 1:
			   PORTD &= ~(1U << SEG_B_PIN);
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	8b b9       	out	0x0b, r24	; 11
			   PORTD &= ~(1U << SEG_C_PIN);	
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	8b b9       	out	0x0b, r24	; 11
			   break;
 10c:	08 95       	ret
		case 2:
			   PORTD &= ~(1U << SEG_A_PIN);
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	8f 7e       	andi	r24, 0xEF	; 239
 112:	8b b9       	out	0x0b, r24	; 11
			   PORTD &= ~(1U << SEG_B_PIN);
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	8f 7d       	andi	r24, 0xDF	; 223
 118:	8b b9       	out	0x0b, r24	; 11
			   PORTD &= ~(1U << SEG_D_PIN);
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	8f 77       	andi	r24, 0x7F	; 127
 11e:	8b b9       	out	0x0b, r24	; 11
			   PORTD &= ~(1U << SEG_E_PIN);
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	8b b9       	out	0x0b, r24	; 11
			   PORTB &= ~(1U << SEG_G_PIN);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	85 b9       	out	0x05, r24	; 5
		       break;
 12c:	08 95       	ret
		 case 3:
			 PORTD &= ~(1U << SEG_A_PIN);
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 7e       	andi	r24, 0xEF	; 239
 132:	8b b9       	out	0x0b, r24	; 11
			 PORTD &= ~(1U << SEG_B_PIN);
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7d       	andi	r24, 0xDF	; 223
 138:	8b b9       	out	0x0b, r24	; 11
			 PORTD &= ~(1U << SEG_C_PIN);
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	8b b9       	out	0x0b, r24	; 11
			 PORTD &= ~(1U << SEG_D_PIN);
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 77       	andi	r24, 0x7F	; 127
 144:	8b b9       	out	0x0b, r24	; 11
			 PORTB &= ~(1U << SEG_G_PIN);
 146:	85 b1       	in	r24, 0x05	; 5
 148:	8b 7f       	andi	r24, 0xFB	; 251
 14a:	85 b9       	out	0x05, r24	; 5
		     break; 
 14c:	08 95       	ret
		 case 4:
		    
		     PORTD &= ~(1U << SEG_B_PIN);
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	8f 7d       	andi	r24, 0xDF	; 223
 152:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_C_PIN);
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8f 7b       	andi	r24, 0xBF	; 191
 158:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_F_PIN);
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	8b b9       	out	0x0b, r24	; 11
		     PORTB &= ~(1U << SEG_G_PIN);
 160:	85 b1       	in	r24, 0x05	; 5
 162:	8b 7f       	andi	r24, 0xFB	; 251
 164:	85 b9       	out	0x05, r24	; 5
			 break;
 166:	08 95       	ret
	    case 5:
		     PORTD &= ~(1U << SEG_A_PIN);
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	8f 7e       	andi	r24, 0xEF	; 239
 16c:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_C_PIN);
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	8f 7b       	andi	r24, 0xBF	; 191
 172:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_D_PIN);
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	8f 77       	andi	r24, 0x7F	; 127
 178:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_F_PIN);
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	8d 7f       	andi	r24, 0xFD	; 253
 17e:	8b b9       	out	0x0b, r24	; 11
		     PORTB &= ~(1U << SEG_G_PIN);
 180:	85 b1       	in	r24, 0x05	; 5
 182:	8b 7f       	andi	r24, 0xFB	; 251
 184:	85 b9       	out	0x05, r24	; 5
			 break;
 186:	08 95       	ret
		case 6:
		     //6
		     PORTD &= ~(1U << SEG_A_PIN);
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	8f 7e       	andi	r24, 0xEF	; 239
 18c:	8b b9       	out	0x0b, r24	; 11
		     //PORTD &= ~(1U << SEG_B_PIN);
		     PORTD &= ~(1U << SEG_C_PIN);
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	8f 7b       	andi	r24, 0xBF	; 191
 192:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_D_PIN);
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	8f 77       	andi	r24, 0x7F	; 127
 198:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_E_PIN);
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_F_PIN);
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8d 7f       	andi	r24, 0xFD	; 253
 1a4:	8b b9       	out	0x0b, r24	; 11
		     PORTB &= ~(1U << SEG_G_PIN);
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	85 b9       	out	0x05, r24	; 5
			 break;
 1ac:	08 95       	ret
		 case 7:
		     //7
		     PORTD &= ~(1U << SEG_A_PIN);
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	8f 7e       	andi	r24, 0xEF	; 239
 1b2:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_B_PIN);
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	8f 7d       	andi	r24, 0xDF	; 223
 1b8:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_C_PIN);
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 7b       	andi	r24, 0xBF	; 191
 1be:	8b b9       	out	0x0b, r24	; 11
             break;
 1c0:	08 95       	ret
		 case 8: 
		     //8
		     PORTD &= ~(1U << SEG_A_PIN);
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	8f 7e       	andi	r24, 0xEF	; 239
 1c6:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_B_PIN);
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	8f 7d       	andi	r24, 0xDF	; 223
 1cc:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_C_PIN);
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	8f 7b       	andi	r24, 0xBF	; 191
 1d2:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_D_PIN);
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	8f 77       	andi	r24, 0x7F	; 127
 1d8:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_E_PIN);
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	8e 7f       	andi	r24, 0xFE	; 254
 1de:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_F_PIN);
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	8d 7f       	andi	r24, 0xFD	; 253
 1e4:	8b b9       	out	0x0b, r24	; 11
		     PORTB &= ~(1U << SEG_G_PIN);
 1e6:	85 b1       	in	r24, 0x05	; 5
 1e8:	8b 7f       	andi	r24, 0xFB	; 251
 1ea:	85 b9       	out	0x05, r24	; 5
			 break;
 1ec:	08 95       	ret
	   case 9:
		     //9
		     PORTD &= ~(1U << SEG_A_PIN);
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8f 7e       	andi	r24, 0xEF	; 239
 1f2:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_B_PIN);
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	8f 7d       	andi	r24, 0xDF	; 223
 1f8:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_C_PIN);
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	8f 7b       	andi	r24, 0xBF	; 191
 1fe:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_D_PIN);
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	8f 77       	andi	r24, 0x7F	; 127
 204:	8b b9       	out	0x0b, r24	; 11
		     PORTD &= ~(1U << SEG_F_PIN);
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	8d 7f       	andi	r24, 0xFD	; 253
 20a:	8b b9       	out	0x0b, r24	; 11
		     PORTB &= ~(1U << SEG_G_PIN);
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	8b 7f       	andi	r24, 0xFB	; 251
 210:	85 b9       	out	0x05, r24	; 5
			 break;
 212:	08 95       	ret
		default:
		      all_segment_off();
 214:	0e 94 5d 00 	call	0xba	; 0xba <all_segment_off>
 218:	08 95       	ret

0000021a <main>:


int main(void)
{
    /* Replace with your application code */
	Serial_begin(9600);
 21a:	60 e8       	ldi	r22, 0x80	; 128
 21c:	75 e2       	ldi	r23, 0x25	; 37
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Serial_begin>
	
	DDRD |= (1U << SEG_A_PIN) | (1U <<SEG_B_PIN) |(1U << SEG_C_PIN) | (1U << SEG_D_PIN) | (1U << SEG_E_PIN) | (1U << SEG_F_PIN);
 226:	8a b1       	in	r24, 0x0a	; 10
 228:	83 6f       	ori	r24, 0xF3	; 243
 22a:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1U << SEG_G_PIN) | (1U << SEG_DP_PIN);
 22c:	84 b1       	in	r24, 0x04	; 4
 22e:	8c 60       	ori	r24, 0x0C	; 12
 230:	84 b9       	out	0x04, r24	; 4
	
	DDRC &= ~(1 << PC0);
 232:	87 b1       	in	r24, 0x07	; 7
 234:	8e 7f       	andi	r24, 0xFE	; 254
 236:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PC0);
 238:	88 b1       	in	r24, 0x08	; 8
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	88 b9       	out	0x08, r24	; 8
	
	DDRB |= (1U << PB2);
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	84 60       	ori	r24, 0x04	; 4
 242:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB2);
 244:	85 b1       	in	r24, 0x05	; 5
 246:	84 60       	ori	r24, 0x04	; 4
 248:	85 b9       	out	0x05, r24	; 5

	DDRB |= (1U << PB5);
 24a:	84 b1       	in	r24, 0x04	; 4
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1U << PB4);
 250:	84 b1       	in	r24, 0x04	; 4
 252:	80 61       	ori	r24, 0x10	; 16
 254:	84 b9       	out	0x04, r24	; 4

	int buttonState = 0;
	int lastButtonState = 1;
	
	all_segment_off();
 256:	0e 94 5d 00 	call	0xba	; 0xba <all_segment_off>

	DDRB |= (1U << PB5);
	DDRB |= (1U << PB4);

	int buttonState = 0;
	int lastButtonState = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
	
	all_segment_off();
    while (1) 
    {
		buttonState = PINC & (1U << PC0);
 25e:	26 b1       	in	r18, 0x06	; 6
		
		if(buttonState == 1 && lastButtonState == 0)
 260:	c2 2f       	mov	r28, r18
 262:	c1 70       	andi	r28, 0x01	; 1
 264:	20 ff       	sbrs	r18, 0
 266:	27 c0       	rjmp	.+78     	; 0x2b6 <main+0x9c>
 268:	89 2b       	or	r24, r25
 26a:	29 f5       	brne	.+74     	; 0x2b6 <main+0x9c>
		{
			
			PORTB ^= (1U << PB2);
 26c:	95 b1       	in	r25, 0x05	; 5
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	89 27       	eor	r24, r25
 272:	85 b9       	out	0x05, r24	; 5
			all_segment_off();
 274:	0e 94 5d 00 	call	0xba	; 0xba <all_segment_off>
			count = (count + 1) % 10;
 278:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 27c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	6a e0       	ldi	r22, 0x0A	; 10
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	0e 94 c9 01 	call	0x392	; 0x392 <__divmodhi4>
 28a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 28e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
			SerialPrintf("Count = %d \r\n",count);
 292:	9f 93       	push	r25
 294:	8f 93       	push	r24
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	9f 93       	push	r25
 29c:	8f 93       	push	r24
 29e:	0e 94 a5 01 	call	0x34a	; 0x34a <SerialPrintf>
			printNumbers(count);
 2a2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2a6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 2aa:	0e 94 64 00 	call	0xc8	; 0xc8 <printNumbers>
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	8f e3       	ldi	r24, 0x3F	; 63
 2b8:	9c e9       	ldi	r25, 0x9C	; 156
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0xa0>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0xa6>
 2c0:	00 00       	nop
		}
		
		lastButtonState = buttonState;
 2c2:	8c 2f       	mov	r24, r28
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	cb cf       	rjmp	.-106    	; 0x25e <main+0x44>

000002c8 <Serial_begin>:
uint8_t SerialRead()
{
	//wait for data to be received
	while(!(UCSR0A & (1U << RXC0))){}
    return UDR0;
}
 2c8:	dc 01       	movw	r26, r24
 2ca:	cb 01       	movw	r24, r22
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	aa 1f       	adc	r26, r26
 2d2:	bb 1f       	adc	r27, r27
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	aa 1f       	adc	r26, r26
 2da:	bb 1f       	adc	r27, r27
 2dc:	9c 01       	movw	r18, r24
 2de:	ad 01       	movw	r20, r26
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	44 1f       	adc	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	44 1f       	adc	r20, r20
 2ee:	55 1f       	adc	r21, r21
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	74 e2       	ldi	r23, 0x24	; 36
 2f4:	84 ef       	ldi	r24, 0xF4	; 244
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__udivmodsi4>
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	31 09       	sbc	r19, r1
 300:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 304:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 308:	86 e0       	ldi	r24, 0x06	; 6
 30a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 30e:	88 e1       	ldi	r24, 0x18	; 24
 310:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 314:	08 95       	ret

00000316 <SerialWrite>:
 316:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 31a:	95 ff       	sbrs	r25, 5
 31c:	fc cf       	rjmp	.-8      	; 0x316 <SerialWrite>
 31e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 322:	08 95       	ret

00000324 <printString>:

void printString(const char *str)
{
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; str[i] != '\0'; i++)
 32c:	c0 e0       	ldi	r28, 0x00	; 0
 32e:	03 c0       	rjmp	.+6      	; 0x336 <printString+0x12>
	{
		
		SerialWrite(str[i]);
 330:	0e 94 8b 01 	call	0x316	; 0x316 <SerialWrite>
    return UDR0;
}

void printString(const char *str)
{
	for(uint8_t i = 0; str[i] != '\0'; i++)
 334:	cf 5f       	subi	r28, 0xFF	; 255
 336:	f8 01       	movw	r30, r16
 338:	ec 0f       	add	r30, r28
 33a:	f1 1d       	adc	r31, r1
 33c:	80 81       	ld	r24, Z
 33e:	81 11       	cpse	r24, r1
 340:	f7 cf       	rjmp	.-18     	; 0x330 <printString+0xc>
	{
		
		SerialWrite(str[i]);
	}
}
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <SerialPrintf>:

void SerialPrintf(const char *format, ...)
{  
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	c0 54       	subi	r28, 0x40	; 64
 354:	d1 09       	sbc	r29, r1
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	ae 01       	movw	r20, r28
 362:	4b 5b       	subi	r20, 0xBB	; 187
 364:	5f 4f       	sbci	r21, 0xFF	; 255
 366:	fa 01       	movw	r30, r20
 368:	61 91       	ld	r22, Z+
 36a:	71 91       	ld	r23, Z+
 36c:	af 01       	movw	r20, r30
	va_list args;
	va_start(args, format);
	
	char buffer[64];
	 // Use the standard C library sprintf() to handle formatting floating-point numbers
	vsprintf(buffer, format, args);
 36e:	ce 01       	movw	r24, r28
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	0e 94 19 02 	call	0x432	; 0x432 <vsprintf>
	
	printString(buffer);
 376:	ce 01       	movw	r24, r28
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	0e 94 92 01 	call	0x324	; 0x324 <printString>
	va_end(args);
}
 37e:	c0 5c       	subi	r28, 0xC0	; 192
 380:	df 4f       	sbci	r29, 0xFF	; 255
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de bf       	out	0x3e, r29	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd bf       	out	0x3d, r28	; 61
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <__divmodhi4>:
 392:	97 fb       	bst	r25, 7
 394:	07 2e       	mov	r0, r23
 396:	16 f4       	brtc	.+4      	; 0x39c <__divmodhi4+0xa>
 398:	00 94       	com	r0
 39a:	07 d0       	rcall	.+14     	; 0x3aa <__divmodhi4_neg1>
 39c:	77 fd       	sbrc	r23, 7
 39e:	09 d0       	rcall	.+18     	; 0x3b2 <__divmodhi4_neg2>
 3a0:	0e 94 05 02 	call	0x40a	; 0x40a <__udivmodhi4>
 3a4:	07 fc       	sbrc	r0, 7
 3a6:	05 d0       	rcall	.+10     	; 0x3b2 <__divmodhi4_neg2>
 3a8:	3e f4       	brtc	.+14     	; 0x3b8 <__divmodhi4_exit>

000003aa <__divmodhi4_neg1>:
 3aa:	90 95       	com	r25
 3ac:	81 95       	neg	r24
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	08 95       	ret

000003b2 <__divmodhi4_neg2>:
 3b2:	70 95       	com	r23
 3b4:	61 95       	neg	r22
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255

000003b8 <__divmodhi4_exit>:
 3b8:	08 95       	ret

000003ba <__udivmodsi4>:
 3ba:	a1 e2       	ldi	r26, 0x21	; 33
 3bc:	1a 2e       	mov	r1, r26
 3be:	aa 1b       	sub	r26, r26
 3c0:	bb 1b       	sub	r27, r27
 3c2:	fd 01       	movw	r30, r26
 3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <__udivmodsi4_ep>

000003c6 <__udivmodsi4_loop>:
 3c6:	aa 1f       	adc	r26, r26
 3c8:	bb 1f       	adc	r27, r27
 3ca:	ee 1f       	adc	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	a2 17       	cp	r26, r18
 3d0:	b3 07       	cpc	r27, r19
 3d2:	e4 07       	cpc	r30, r20
 3d4:	f5 07       	cpc	r31, r21
 3d6:	20 f0       	brcs	.+8      	; 0x3e0 <__udivmodsi4_ep>
 3d8:	a2 1b       	sub	r26, r18
 3da:	b3 0b       	sbc	r27, r19
 3dc:	e4 0b       	sbc	r30, r20
 3de:	f5 0b       	sbc	r31, r21

000003e0 <__udivmodsi4_ep>:
 3e0:	66 1f       	adc	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	88 1f       	adc	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	1a 94       	dec	r1
 3ea:	69 f7       	brne	.-38     	; 0x3c6 <__udivmodsi4_loop>
 3ec:	60 95       	com	r22
 3ee:	70 95       	com	r23
 3f0:	80 95       	com	r24
 3f2:	90 95       	com	r25
 3f4:	9b 01       	movw	r18, r22
 3f6:	ac 01       	movw	r20, r24
 3f8:	bd 01       	movw	r22, r26
 3fa:	cf 01       	movw	r24, r30
 3fc:	08 95       	ret

000003fe <__tablejump2__>:
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	05 90       	lpm	r0, Z+
 404:	f4 91       	lpm	r31, Z
 406:	e0 2d       	mov	r30, r0
 408:	09 94       	ijmp

0000040a <__udivmodhi4>:
 40a:	aa 1b       	sub	r26, r26
 40c:	bb 1b       	sub	r27, r27
 40e:	51 e1       	ldi	r21, 0x11	; 17
 410:	07 c0       	rjmp	.+14     	; 0x420 <__udivmodhi4_ep>

00000412 <__udivmodhi4_loop>:
 412:	aa 1f       	adc	r26, r26
 414:	bb 1f       	adc	r27, r27
 416:	a6 17       	cp	r26, r22
 418:	b7 07       	cpc	r27, r23
 41a:	10 f0       	brcs	.+4      	; 0x420 <__udivmodhi4_ep>
 41c:	a6 1b       	sub	r26, r22
 41e:	b7 0b       	sbc	r27, r23

00000420 <__udivmodhi4_ep>:
 420:	88 1f       	adc	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	5a 95       	dec	r21
 426:	a9 f7       	brne	.-22     	; 0x412 <__udivmodhi4_loop>
 428:	80 95       	com	r24
 42a:	90 95       	com	r25
 42c:	bc 01       	movw	r22, r24
 42e:	cd 01       	movw	r24, r26
 430:	08 95       	ret

00000432 <vsprintf>:
 432:	ae e0       	ldi	r26, 0x0E	; 14
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	ef e1       	ldi	r30, 0x1F	; 31
 438:	f2 e0       	ldi	r31, 0x02	; 2
 43a:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__prologue_saves__+0x1c>
 43e:	8c 01       	movw	r16, r24
 440:	86 e0       	ldi	r24, 0x06	; 6
 442:	8c 83       	std	Y+4, r24	; 0x04
 444:	1a 83       	std	Y+2, r17	; 0x02
 446:	09 83       	std	Y+1, r16	; 0x01
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	9f e7       	ldi	r25, 0x7F	; 127
 44c:	9e 83       	std	Y+6, r25	; 0x06
 44e:	8d 83       	std	Y+5, r24	; 0x05
 450:	ce 01       	movw	r24, r28
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	0e 94 35 02 	call	0x46a	; 0x46a <vfprintf>
 458:	ef 81       	ldd	r30, Y+7	; 0x07
 45a:	f8 85       	ldd	r31, Y+8	; 0x08
 45c:	e0 0f       	add	r30, r16
 45e:	f1 1f       	adc	r31, r17
 460:	10 82       	st	Z, r1
 462:	2e 96       	adiw	r28, 0x0e	; 14
 464:	e4 e0       	ldi	r30, 0x04	; 4
 466:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__epilogue_restores__+0x1c>

0000046a <vfprintf>:
 46a:	ab e0       	ldi	r26, 0x0B	; 11
 46c:	b0 e0       	ldi	r27, 0x00	; 0
 46e:	eb e3       	ldi	r30, 0x3B	; 59
 470:	f2 e0       	ldi	r31, 0x02	; 2
 472:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__prologue_saves__>
 476:	6c 01       	movw	r12, r24
 478:	7b 01       	movw	r14, r22
 47a:	8a 01       	movw	r16, r20
 47c:	fc 01       	movw	r30, r24
 47e:	17 82       	std	Z+7, r1	; 0x07
 480:	16 82       	std	Z+6, r1	; 0x06
 482:	83 81       	ldd	r24, Z+3	; 0x03
 484:	81 ff       	sbrs	r24, 1
 486:	cc c1       	rjmp	.+920    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 488:	ce 01       	movw	r24, r28
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	3c 01       	movw	r6, r24
 48e:	f6 01       	movw	r30, r12
 490:	93 81       	ldd	r25, Z+3	; 0x03
 492:	f7 01       	movw	r30, r14
 494:	93 fd       	sbrc	r25, 3
 496:	85 91       	lpm	r24, Z+
 498:	93 ff       	sbrs	r25, 3
 49a:	81 91       	ld	r24, Z+
 49c:	7f 01       	movw	r14, r30
 49e:	88 23       	and	r24, r24
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <vfprintf+0x3a>
 4a2:	ba c1       	rjmp	.+884    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 4a4:	85 32       	cpi	r24, 0x25	; 37
 4a6:	39 f4       	brne	.+14     	; 0x4b6 <vfprintf+0x4c>
 4a8:	93 fd       	sbrc	r25, 3
 4aa:	85 91       	lpm	r24, Z+
 4ac:	93 ff       	sbrs	r25, 3
 4ae:	81 91       	ld	r24, Z+
 4b0:	7f 01       	movw	r14, r30
 4b2:	85 32       	cpi	r24, 0x25	; 37
 4b4:	29 f4       	brne	.+10     	; 0x4c0 <vfprintf+0x56>
 4b6:	b6 01       	movw	r22, r12
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 2c 04 	call	0x858	; 0x858 <fputc>
 4be:	e7 cf       	rjmp	.-50     	; 0x48e <vfprintf+0x24>
 4c0:	91 2c       	mov	r9, r1
 4c2:	21 2c       	mov	r2, r1
 4c4:	31 2c       	mov	r3, r1
 4c6:	ff e1       	ldi	r31, 0x1F	; 31
 4c8:	f3 15       	cp	r31, r3
 4ca:	d8 f0       	brcs	.+54     	; 0x502 <vfprintf+0x98>
 4cc:	8b 32       	cpi	r24, 0x2B	; 43
 4ce:	79 f0       	breq	.+30     	; 0x4ee <vfprintf+0x84>
 4d0:	38 f4       	brcc	.+14     	; 0x4e0 <vfprintf+0x76>
 4d2:	80 32       	cpi	r24, 0x20	; 32
 4d4:	79 f0       	breq	.+30     	; 0x4f4 <vfprintf+0x8a>
 4d6:	83 32       	cpi	r24, 0x23	; 35
 4d8:	a1 f4       	brne	.+40     	; 0x502 <vfprintf+0x98>
 4da:	23 2d       	mov	r18, r3
 4dc:	20 61       	ori	r18, 0x10	; 16
 4de:	1d c0       	rjmp	.+58     	; 0x51a <vfprintf+0xb0>
 4e0:	8d 32       	cpi	r24, 0x2D	; 45
 4e2:	61 f0       	breq	.+24     	; 0x4fc <vfprintf+0x92>
 4e4:	80 33       	cpi	r24, 0x30	; 48
 4e6:	69 f4       	brne	.+26     	; 0x502 <vfprintf+0x98>
 4e8:	23 2d       	mov	r18, r3
 4ea:	21 60       	ori	r18, 0x01	; 1
 4ec:	16 c0       	rjmp	.+44     	; 0x51a <vfprintf+0xb0>
 4ee:	83 2d       	mov	r24, r3
 4f0:	82 60       	ori	r24, 0x02	; 2
 4f2:	38 2e       	mov	r3, r24
 4f4:	e3 2d       	mov	r30, r3
 4f6:	e4 60       	ori	r30, 0x04	; 4
 4f8:	3e 2e       	mov	r3, r30
 4fa:	2a c0       	rjmp	.+84     	; 0x550 <vfprintf+0xe6>
 4fc:	f3 2d       	mov	r31, r3
 4fe:	f8 60       	ori	r31, 0x08	; 8
 500:	1d c0       	rjmp	.+58     	; 0x53c <vfprintf+0xd2>
 502:	37 fc       	sbrc	r3, 7
 504:	2d c0       	rjmp	.+90     	; 0x560 <vfprintf+0xf6>
 506:	20 ed       	ldi	r18, 0xD0	; 208
 508:	28 0f       	add	r18, r24
 50a:	2a 30       	cpi	r18, 0x0A	; 10
 50c:	40 f0       	brcs	.+16     	; 0x51e <vfprintf+0xb4>
 50e:	8e 32       	cpi	r24, 0x2E	; 46
 510:	b9 f4       	brne	.+46     	; 0x540 <vfprintf+0xd6>
 512:	36 fc       	sbrc	r3, 6
 514:	81 c1       	rjmp	.+770    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 516:	23 2d       	mov	r18, r3
 518:	20 64       	ori	r18, 0x40	; 64
 51a:	32 2e       	mov	r3, r18
 51c:	19 c0       	rjmp	.+50     	; 0x550 <vfprintf+0xe6>
 51e:	36 fe       	sbrs	r3, 6
 520:	06 c0       	rjmp	.+12     	; 0x52e <vfprintf+0xc4>
 522:	8a e0       	ldi	r24, 0x0A	; 10
 524:	98 9e       	mul	r9, r24
 526:	20 0d       	add	r18, r0
 528:	11 24       	eor	r1, r1
 52a:	92 2e       	mov	r9, r18
 52c:	11 c0       	rjmp	.+34     	; 0x550 <vfprintf+0xe6>
 52e:	ea e0       	ldi	r30, 0x0A	; 10
 530:	2e 9e       	mul	r2, r30
 532:	20 0d       	add	r18, r0
 534:	11 24       	eor	r1, r1
 536:	22 2e       	mov	r2, r18
 538:	f3 2d       	mov	r31, r3
 53a:	f0 62       	ori	r31, 0x20	; 32
 53c:	3f 2e       	mov	r3, r31
 53e:	08 c0       	rjmp	.+16     	; 0x550 <vfprintf+0xe6>
 540:	8c 36       	cpi	r24, 0x6C	; 108
 542:	21 f4       	brne	.+8      	; 0x54c <vfprintf+0xe2>
 544:	83 2d       	mov	r24, r3
 546:	80 68       	ori	r24, 0x80	; 128
 548:	38 2e       	mov	r3, r24
 54a:	02 c0       	rjmp	.+4      	; 0x550 <vfprintf+0xe6>
 54c:	88 36       	cpi	r24, 0x68	; 104
 54e:	41 f4       	brne	.+16     	; 0x560 <vfprintf+0xf6>
 550:	f7 01       	movw	r30, r14
 552:	93 fd       	sbrc	r25, 3
 554:	85 91       	lpm	r24, Z+
 556:	93 ff       	sbrs	r25, 3
 558:	81 91       	ld	r24, Z+
 55a:	7f 01       	movw	r14, r30
 55c:	81 11       	cpse	r24, r1
 55e:	b3 cf       	rjmp	.-154    	; 0x4c6 <vfprintf+0x5c>
 560:	98 2f       	mov	r25, r24
 562:	9f 7d       	andi	r25, 0xDF	; 223
 564:	95 54       	subi	r25, 0x45	; 69
 566:	93 30       	cpi	r25, 0x03	; 3
 568:	28 f4       	brcc	.+10     	; 0x574 <vfprintf+0x10a>
 56a:	0c 5f       	subi	r16, 0xFC	; 252
 56c:	1f 4f       	sbci	r17, 0xFF	; 255
 56e:	9f e3       	ldi	r25, 0x3F	; 63
 570:	99 83       	std	Y+1, r25	; 0x01
 572:	0d c0       	rjmp	.+26     	; 0x58e <vfprintf+0x124>
 574:	83 36       	cpi	r24, 0x63	; 99
 576:	31 f0       	breq	.+12     	; 0x584 <vfprintf+0x11a>
 578:	83 37       	cpi	r24, 0x73	; 115
 57a:	71 f0       	breq	.+28     	; 0x598 <vfprintf+0x12e>
 57c:	83 35       	cpi	r24, 0x53	; 83
 57e:	09 f0       	breq	.+2      	; 0x582 <vfprintf+0x118>
 580:	59 c0       	rjmp	.+178    	; 0x634 <vfprintf+0x1ca>
 582:	21 c0       	rjmp	.+66     	; 0x5c6 <vfprintf+0x15c>
 584:	f8 01       	movw	r30, r16
 586:	80 81       	ld	r24, Z
 588:	89 83       	std	Y+1, r24	; 0x01
 58a:	0e 5f       	subi	r16, 0xFE	; 254
 58c:	1f 4f       	sbci	r17, 0xFF	; 255
 58e:	88 24       	eor	r8, r8
 590:	83 94       	inc	r8
 592:	91 2c       	mov	r9, r1
 594:	53 01       	movw	r10, r6
 596:	13 c0       	rjmp	.+38     	; 0x5be <vfprintf+0x154>
 598:	28 01       	movw	r4, r16
 59a:	f2 e0       	ldi	r31, 0x02	; 2
 59c:	4f 0e       	add	r4, r31
 59e:	51 1c       	adc	r5, r1
 5a0:	f8 01       	movw	r30, r16
 5a2:	a0 80       	ld	r10, Z
 5a4:	b1 80       	ldd	r11, Z+1	; 0x01
 5a6:	36 fe       	sbrs	r3, 6
 5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <vfprintf+0x146>
 5aa:	69 2d       	mov	r22, r9
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <vfprintf+0x14a>
 5b0:	6f ef       	ldi	r22, 0xFF	; 255
 5b2:	7f ef       	ldi	r23, 0xFF	; 255
 5b4:	c5 01       	movw	r24, r10
 5b6:	0e 94 21 04 	call	0x842	; 0x842 <strnlen>
 5ba:	4c 01       	movw	r8, r24
 5bc:	82 01       	movw	r16, r4
 5be:	f3 2d       	mov	r31, r3
 5c0:	ff 77       	andi	r31, 0x7F	; 127
 5c2:	3f 2e       	mov	r3, r31
 5c4:	16 c0       	rjmp	.+44     	; 0x5f2 <vfprintf+0x188>
 5c6:	28 01       	movw	r4, r16
 5c8:	22 e0       	ldi	r18, 0x02	; 2
 5ca:	42 0e       	add	r4, r18
 5cc:	51 1c       	adc	r5, r1
 5ce:	f8 01       	movw	r30, r16
 5d0:	a0 80       	ld	r10, Z
 5d2:	b1 80       	ldd	r11, Z+1	; 0x01
 5d4:	36 fe       	sbrs	r3, 6
 5d6:	03 c0       	rjmp	.+6      	; 0x5de <vfprintf+0x174>
 5d8:	69 2d       	mov	r22, r9
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <vfprintf+0x178>
 5de:	6f ef       	ldi	r22, 0xFF	; 255
 5e0:	7f ef       	ldi	r23, 0xFF	; 255
 5e2:	c5 01       	movw	r24, r10
 5e4:	0e 94 16 04 	call	0x82c	; 0x82c <strnlen_P>
 5e8:	4c 01       	movw	r8, r24
 5ea:	f3 2d       	mov	r31, r3
 5ec:	f0 68       	ori	r31, 0x80	; 128
 5ee:	3f 2e       	mov	r3, r31
 5f0:	82 01       	movw	r16, r4
 5f2:	33 fc       	sbrc	r3, 3
 5f4:	1b c0       	rjmp	.+54     	; 0x62c <vfprintf+0x1c2>
 5f6:	82 2d       	mov	r24, r2
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	88 16       	cp	r8, r24
 5fc:	99 06       	cpc	r9, r25
 5fe:	b0 f4       	brcc	.+44     	; 0x62c <vfprintf+0x1c2>
 600:	b6 01       	movw	r22, r12
 602:	80 e2       	ldi	r24, 0x20	; 32
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 2c 04 	call	0x858	; 0x858 <fputc>
 60a:	2a 94       	dec	r2
 60c:	f4 cf       	rjmp	.-24     	; 0x5f6 <vfprintf+0x18c>
 60e:	f5 01       	movw	r30, r10
 610:	37 fc       	sbrc	r3, 7
 612:	85 91       	lpm	r24, Z+
 614:	37 fe       	sbrs	r3, 7
 616:	81 91       	ld	r24, Z+
 618:	5f 01       	movw	r10, r30
 61a:	b6 01       	movw	r22, r12
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 2c 04 	call	0x858	; 0x858 <fputc>
 622:	21 10       	cpse	r2, r1
 624:	2a 94       	dec	r2
 626:	21 e0       	ldi	r18, 0x01	; 1
 628:	82 1a       	sub	r8, r18
 62a:	91 08       	sbc	r9, r1
 62c:	81 14       	cp	r8, r1
 62e:	91 04       	cpc	r9, r1
 630:	71 f7       	brne	.-36     	; 0x60e <vfprintf+0x1a4>
 632:	e8 c0       	rjmp	.+464    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 634:	84 36       	cpi	r24, 0x64	; 100
 636:	11 f0       	breq	.+4      	; 0x63c <vfprintf+0x1d2>
 638:	89 36       	cpi	r24, 0x69	; 105
 63a:	41 f5       	brne	.+80     	; 0x68c <vfprintf+0x222>
 63c:	f8 01       	movw	r30, r16
 63e:	37 fe       	sbrs	r3, 7
 640:	07 c0       	rjmp	.+14     	; 0x650 <vfprintf+0x1e6>
 642:	60 81       	ld	r22, Z
 644:	71 81       	ldd	r23, Z+1	; 0x01
 646:	82 81       	ldd	r24, Z+2	; 0x02
 648:	93 81       	ldd	r25, Z+3	; 0x03
 64a:	0c 5f       	subi	r16, 0xFC	; 252
 64c:	1f 4f       	sbci	r17, 0xFF	; 255
 64e:	08 c0       	rjmp	.+16     	; 0x660 <vfprintf+0x1f6>
 650:	60 81       	ld	r22, Z
 652:	71 81       	ldd	r23, Z+1	; 0x01
 654:	07 2e       	mov	r0, r23
 656:	00 0c       	add	r0, r0
 658:	88 0b       	sbc	r24, r24
 65a:	99 0b       	sbc	r25, r25
 65c:	0e 5f       	subi	r16, 0xFE	; 254
 65e:	1f 4f       	sbci	r17, 0xFF	; 255
 660:	f3 2d       	mov	r31, r3
 662:	ff 76       	andi	r31, 0x6F	; 111
 664:	3f 2e       	mov	r3, r31
 666:	97 ff       	sbrs	r25, 7
 668:	09 c0       	rjmp	.+18     	; 0x67c <vfprintf+0x212>
 66a:	90 95       	com	r25
 66c:	80 95       	com	r24
 66e:	70 95       	com	r23
 670:	61 95       	neg	r22
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	f0 68       	ori	r31, 0x80	; 128
 67a:	3f 2e       	mov	r3, r31
 67c:	2a e0       	ldi	r18, 0x0A	; 10
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	a3 01       	movw	r20, r6
 682:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__ultoa_invert>
 686:	88 2e       	mov	r8, r24
 688:	86 18       	sub	r8, r6
 68a:	45 c0       	rjmp	.+138    	; 0x716 <vfprintf+0x2ac>
 68c:	85 37       	cpi	r24, 0x75	; 117
 68e:	31 f4       	brne	.+12     	; 0x69c <vfprintf+0x232>
 690:	23 2d       	mov	r18, r3
 692:	2f 7e       	andi	r18, 0xEF	; 239
 694:	b2 2e       	mov	r11, r18
 696:	2a e0       	ldi	r18, 0x0A	; 10
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	25 c0       	rjmp	.+74     	; 0x6e6 <vfprintf+0x27c>
 69c:	93 2d       	mov	r25, r3
 69e:	99 7f       	andi	r25, 0xF9	; 249
 6a0:	b9 2e       	mov	r11, r25
 6a2:	8f 36       	cpi	r24, 0x6F	; 111
 6a4:	c1 f0       	breq	.+48     	; 0x6d6 <vfprintf+0x26c>
 6a6:	18 f4       	brcc	.+6      	; 0x6ae <vfprintf+0x244>
 6a8:	88 35       	cpi	r24, 0x58	; 88
 6aa:	79 f0       	breq	.+30     	; 0x6ca <vfprintf+0x260>
 6ac:	b5 c0       	rjmp	.+362    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 6ae:	80 37       	cpi	r24, 0x70	; 112
 6b0:	19 f0       	breq	.+6      	; 0x6b8 <vfprintf+0x24e>
 6b2:	88 37       	cpi	r24, 0x78	; 120
 6b4:	21 f0       	breq	.+8      	; 0x6be <vfprintf+0x254>
 6b6:	b0 c0       	rjmp	.+352    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 6b8:	e9 2f       	mov	r30, r25
 6ba:	e0 61       	ori	r30, 0x10	; 16
 6bc:	be 2e       	mov	r11, r30
 6be:	b4 fe       	sbrs	r11, 4
 6c0:	0d c0       	rjmp	.+26     	; 0x6dc <vfprintf+0x272>
 6c2:	fb 2d       	mov	r31, r11
 6c4:	f4 60       	ori	r31, 0x04	; 4
 6c6:	bf 2e       	mov	r11, r31
 6c8:	09 c0       	rjmp	.+18     	; 0x6dc <vfprintf+0x272>
 6ca:	34 fe       	sbrs	r3, 4
 6cc:	0a c0       	rjmp	.+20     	; 0x6e2 <vfprintf+0x278>
 6ce:	29 2f       	mov	r18, r25
 6d0:	26 60       	ori	r18, 0x06	; 6
 6d2:	b2 2e       	mov	r11, r18
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <vfprintf+0x278>
 6d6:	28 e0       	ldi	r18, 0x08	; 8
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	05 c0       	rjmp	.+10     	; 0x6e6 <vfprintf+0x27c>
 6dc:	20 e1       	ldi	r18, 0x10	; 16
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <vfprintf+0x27c>
 6e2:	20 e1       	ldi	r18, 0x10	; 16
 6e4:	32 e0       	ldi	r19, 0x02	; 2
 6e6:	f8 01       	movw	r30, r16
 6e8:	b7 fe       	sbrs	r11, 7
 6ea:	07 c0       	rjmp	.+14     	; 0x6fa <vfprintf+0x290>
 6ec:	60 81       	ld	r22, Z
 6ee:	71 81       	ldd	r23, Z+1	; 0x01
 6f0:	82 81       	ldd	r24, Z+2	; 0x02
 6f2:	93 81       	ldd	r25, Z+3	; 0x03
 6f4:	0c 5f       	subi	r16, 0xFC	; 252
 6f6:	1f 4f       	sbci	r17, 0xFF	; 255
 6f8:	06 c0       	rjmp	.+12     	; 0x706 <vfprintf+0x29c>
 6fa:	60 81       	ld	r22, Z
 6fc:	71 81       	ldd	r23, Z+1	; 0x01
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 5f       	subi	r16, 0xFE	; 254
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	a3 01       	movw	r20, r6
 708:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__ultoa_invert>
 70c:	88 2e       	mov	r8, r24
 70e:	86 18       	sub	r8, r6
 710:	fb 2d       	mov	r31, r11
 712:	ff 77       	andi	r31, 0x7F	; 127
 714:	3f 2e       	mov	r3, r31
 716:	36 fe       	sbrs	r3, 6
 718:	0d c0       	rjmp	.+26     	; 0x734 <vfprintf+0x2ca>
 71a:	23 2d       	mov	r18, r3
 71c:	2e 7f       	andi	r18, 0xFE	; 254
 71e:	a2 2e       	mov	r10, r18
 720:	89 14       	cp	r8, r9
 722:	58 f4       	brcc	.+22     	; 0x73a <vfprintf+0x2d0>
 724:	34 fe       	sbrs	r3, 4
 726:	0b c0       	rjmp	.+22     	; 0x73e <vfprintf+0x2d4>
 728:	32 fc       	sbrc	r3, 2
 72a:	09 c0       	rjmp	.+18     	; 0x73e <vfprintf+0x2d4>
 72c:	83 2d       	mov	r24, r3
 72e:	8e 7e       	andi	r24, 0xEE	; 238
 730:	a8 2e       	mov	r10, r24
 732:	05 c0       	rjmp	.+10     	; 0x73e <vfprintf+0x2d4>
 734:	b8 2c       	mov	r11, r8
 736:	a3 2c       	mov	r10, r3
 738:	03 c0       	rjmp	.+6      	; 0x740 <vfprintf+0x2d6>
 73a:	b8 2c       	mov	r11, r8
 73c:	01 c0       	rjmp	.+2      	; 0x740 <vfprintf+0x2d6>
 73e:	b9 2c       	mov	r11, r9
 740:	a4 fe       	sbrs	r10, 4
 742:	0f c0       	rjmp	.+30     	; 0x762 <vfprintf+0x2f8>
 744:	fe 01       	movw	r30, r28
 746:	e8 0d       	add	r30, r8
 748:	f1 1d       	adc	r31, r1
 74a:	80 81       	ld	r24, Z
 74c:	80 33       	cpi	r24, 0x30	; 48
 74e:	21 f4       	brne	.+8      	; 0x758 <vfprintf+0x2ee>
 750:	9a 2d       	mov	r25, r10
 752:	99 7e       	andi	r25, 0xE9	; 233
 754:	a9 2e       	mov	r10, r25
 756:	09 c0       	rjmp	.+18     	; 0x76a <vfprintf+0x300>
 758:	a2 fe       	sbrs	r10, 2
 75a:	06 c0       	rjmp	.+12     	; 0x768 <vfprintf+0x2fe>
 75c:	b3 94       	inc	r11
 75e:	b3 94       	inc	r11
 760:	04 c0       	rjmp	.+8      	; 0x76a <vfprintf+0x300>
 762:	8a 2d       	mov	r24, r10
 764:	86 78       	andi	r24, 0x86	; 134
 766:	09 f0       	breq	.+2      	; 0x76a <vfprintf+0x300>
 768:	b3 94       	inc	r11
 76a:	a3 fc       	sbrc	r10, 3
 76c:	11 c0       	rjmp	.+34     	; 0x790 <vfprintf+0x326>
 76e:	a0 fe       	sbrs	r10, 0
 770:	06 c0       	rjmp	.+12     	; 0x77e <vfprintf+0x314>
 772:	b2 14       	cp	r11, r2
 774:	88 f4       	brcc	.+34     	; 0x798 <vfprintf+0x32e>
 776:	28 0c       	add	r2, r8
 778:	92 2c       	mov	r9, r2
 77a:	9b 18       	sub	r9, r11
 77c:	0e c0       	rjmp	.+28     	; 0x79a <vfprintf+0x330>
 77e:	b2 14       	cp	r11, r2
 780:	60 f4       	brcc	.+24     	; 0x79a <vfprintf+0x330>
 782:	b6 01       	movw	r22, r12
 784:	80 e2       	ldi	r24, 0x20	; 32
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 2c 04 	call	0x858	; 0x858 <fputc>
 78c:	b3 94       	inc	r11
 78e:	f7 cf       	rjmp	.-18     	; 0x77e <vfprintf+0x314>
 790:	b2 14       	cp	r11, r2
 792:	18 f4       	brcc	.+6      	; 0x79a <vfprintf+0x330>
 794:	2b 18       	sub	r2, r11
 796:	02 c0       	rjmp	.+4      	; 0x79c <vfprintf+0x332>
 798:	98 2c       	mov	r9, r8
 79a:	21 2c       	mov	r2, r1
 79c:	a4 fe       	sbrs	r10, 4
 79e:	10 c0       	rjmp	.+32     	; 0x7c0 <vfprintf+0x356>
 7a0:	b6 01       	movw	r22, r12
 7a2:	80 e3       	ldi	r24, 0x30	; 48
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 2c 04 	call	0x858	; 0x858 <fputc>
 7aa:	a2 fe       	sbrs	r10, 2
 7ac:	17 c0       	rjmp	.+46     	; 0x7dc <vfprintf+0x372>
 7ae:	a1 fc       	sbrc	r10, 1
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <vfprintf+0x34e>
 7b2:	88 e7       	ldi	r24, 0x78	; 120
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <vfprintf+0x352>
 7b8:	88 e5       	ldi	r24, 0x58	; 88
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	b6 01       	movw	r22, r12
 7be:	0c c0       	rjmp	.+24     	; 0x7d8 <vfprintf+0x36e>
 7c0:	8a 2d       	mov	r24, r10
 7c2:	86 78       	andi	r24, 0x86	; 134
 7c4:	59 f0       	breq	.+22     	; 0x7dc <vfprintf+0x372>
 7c6:	a1 fe       	sbrs	r10, 1
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <vfprintf+0x364>
 7ca:	8b e2       	ldi	r24, 0x2B	; 43
 7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <vfprintf+0x366>
 7ce:	80 e2       	ldi	r24, 0x20	; 32
 7d0:	a7 fc       	sbrc	r10, 7
 7d2:	8d e2       	ldi	r24, 0x2D	; 45
 7d4:	b6 01       	movw	r22, r12
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 2c 04 	call	0x858	; 0x858 <fputc>
 7dc:	89 14       	cp	r8, r9
 7de:	38 f4       	brcc	.+14     	; 0x7ee <vfprintf+0x384>
 7e0:	b6 01       	movw	r22, r12
 7e2:	80 e3       	ldi	r24, 0x30	; 48
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 2c 04 	call	0x858	; 0x858 <fputc>
 7ea:	9a 94       	dec	r9
 7ec:	f7 cf       	rjmp	.-18     	; 0x7dc <vfprintf+0x372>
 7ee:	8a 94       	dec	r8
 7f0:	f3 01       	movw	r30, r6
 7f2:	e8 0d       	add	r30, r8
 7f4:	f1 1d       	adc	r31, r1
 7f6:	80 81       	ld	r24, Z
 7f8:	b6 01       	movw	r22, r12
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 2c 04 	call	0x858	; 0x858 <fputc>
 800:	81 10       	cpse	r8, r1
 802:	f5 cf       	rjmp	.-22     	; 0x7ee <vfprintf+0x384>
 804:	22 20       	and	r2, r2
 806:	09 f4       	brne	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 808:	42 ce       	rjmp	.-892    	; 0x48e <vfprintf+0x24>
 80a:	b6 01       	movw	r22, r12
 80c:	80 e2       	ldi	r24, 0x20	; 32
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 2c 04 	call	0x858	; 0x858 <fputc>
 814:	2a 94       	dec	r2
 816:	f6 cf       	rjmp	.-20     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 818:	f6 01       	movw	r30, r12
 81a:	86 81       	ldd	r24, Z+6	; 0x06
 81c:	97 81       	ldd	r25, Z+7	; 0x07
 81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 820:	8f ef       	ldi	r24, 0xFF	; 255
 822:	9f ef       	ldi	r25, 0xFF	; 255
 824:	2b 96       	adiw	r28, 0x0b	; 11
 826:	e2 e1       	ldi	r30, 0x12	; 18
 828:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__epilogue_restores__>

0000082c <strnlen_P>:
 82c:	fc 01       	movw	r30, r24
 82e:	05 90       	lpm	r0, Z+
 830:	61 50       	subi	r22, 0x01	; 1
 832:	70 40       	sbci	r23, 0x00	; 0
 834:	01 10       	cpse	r0, r1
 836:	d8 f7       	brcc	.-10     	; 0x82e <strnlen_P+0x2>
 838:	80 95       	com	r24
 83a:	90 95       	com	r25
 83c:	8e 0f       	add	r24, r30
 83e:	9f 1f       	adc	r25, r31
 840:	08 95       	ret

00000842 <strnlen>:
 842:	fc 01       	movw	r30, r24
 844:	61 50       	subi	r22, 0x01	; 1
 846:	70 40       	sbci	r23, 0x00	; 0
 848:	01 90       	ld	r0, Z+
 84a:	01 10       	cpse	r0, r1
 84c:	d8 f7       	brcc	.-10     	; 0x844 <strnlen+0x2>
 84e:	80 95       	com	r24
 850:	90 95       	com	r25
 852:	8e 0f       	add	r24, r30
 854:	9f 1f       	adc	r25, r31
 856:	08 95       	ret

00000858 <fputc>:
 858:	0f 93       	push	r16
 85a:	1f 93       	push	r17
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	fb 01       	movw	r30, r22
 862:	23 81       	ldd	r18, Z+3	; 0x03
 864:	21 fd       	sbrc	r18, 1
 866:	03 c0       	rjmp	.+6      	; 0x86e <fputc+0x16>
 868:	8f ef       	ldi	r24, 0xFF	; 255
 86a:	9f ef       	ldi	r25, 0xFF	; 255
 86c:	2c c0       	rjmp	.+88     	; 0x8c6 <fputc+0x6e>
 86e:	22 ff       	sbrs	r18, 2
 870:	16 c0       	rjmp	.+44     	; 0x89e <fputc+0x46>
 872:	46 81       	ldd	r20, Z+6	; 0x06
 874:	57 81       	ldd	r21, Z+7	; 0x07
 876:	24 81       	ldd	r18, Z+4	; 0x04
 878:	35 81       	ldd	r19, Z+5	; 0x05
 87a:	42 17       	cp	r20, r18
 87c:	53 07       	cpc	r21, r19
 87e:	44 f4       	brge	.+16     	; 0x890 <fputc+0x38>
 880:	a0 81       	ld	r26, Z
 882:	b1 81       	ldd	r27, Z+1	; 0x01
 884:	9d 01       	movw	r18, r26
 886:	2f 5f       	subi	r18, 0xFF	; 255
 888:	3f 4f       	sbci	r19, 0xFF	; 255
 88a:	31 83       	std	Z+1, r19	; 0x01
 88c:	20 83       	st	Z, r18
 88e:	8c 93       	st	X, r24
 890:	26 81       	ldd	r18, Z+6	; 0x06
 892:	37 81       	ldd	r19, Z+7	; 0x07
 894:	2f 5f       	subi	r18, 0xFF	; 255
 896:	3f 4f       	sbci	r19, 0xFF	; 255
 898:	37 83       	std	Z+7, r19	; 0x07
 89a:	26 83       	std	Z+6, r18	; 0x06
 89c:	14 c0       	rjmp	.+40     	; 0x8c6 <fputc+0x6e>
 89e:	8b 01       	movw	r16, r22
 8a0:	ec 01       	movw	r28, r24
 8a2:	fb 01       	movw	r30, r22
 8a4:	00 84       	ldd	r0, Z+8	; 0x08
 8a6:	f1 85       	ldd	r31, Z+9	; 0x09
 8a8:	e0 2d       	mov	r30, r0
 8aa:	09 95       	icall
 8ac:	89 2b       	or	r24, r25
 8ae:	e1 f6       	brne	.-72     	; 0x868 <fputc+0x10>
 8b0:	d8 01       	movw	r26, r16
 8b2:	16 96       	adiw	r26, 0x06	; 6
 8b4:	8d 91       	ld	r24, X+
 8b6:	9c 91       	ld	r25, X
 8b8:	17 97       	sbiw	r26, 0x07	; 7
 8ba:	01 96       	adiw	r24, 0x01	; 1
 8bc:	17 96       	adiw	r26, 0x07	; 7
 8be:	9c 93       	st	X, r25
 8c0:	8e 93       	st	-X, r24
 8c2:	16 97       	sbiw	r26, 0x06	; 6
 8c4:	ce 01       	movw	r24, r28
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	1f 91       	pop	r17
 8cc:	0f 91       	pop	r16
 8ce:	08 95       	ret

000008d0 <__ultoa_invert>:
 8d0:	fa 01       	movw	r30, r20
 8d2:	aa 27       	eor	r26, r26
 8d4:	28 30       	cpi	r18, 0x08	; 8
 8d6:	51 f1       	breq	.+84     	; 0x92c <__stack+0x2d>
 8d8:	20 31       	cpi	r18, 0x10	; 16
 8da:	81 f1       	breq	.+96     	; 0x93c <__stack+0x3d>
 8dc:	e8 94       	clt
 8de:	6f 93       	push	r22
 8e0:	6e 7f       	andi	r22, 0xFE	; 254
 8e2:	6e 5f       	subi	r22, 0xFE	; 254
 8e4:	7f 4f       	sbci	r23, 0xFF	; 255
 8e6:	8f 4f       	sbci	r24, 0xFF	; 255
 8e8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ea:	af 4f       	sbci	r26, 0xFF	; 255
 8ec:	b1 e0       	ldi	r27, 0x01	; 1
 8ee:	3e d0       	rcall	.+124    	; 0x96c <__stack+0x6d>
 8f0:	b4 e0       	ldi	r27, 0x04	; 4
 8f2:	3c d0       	rcall	.+120    	; 0x96c <__stack+0x6d>
 8f4:	67 0f       	add	r22, r23
 8f6:	78 1f       	adc	r23, r24
 8f8:	89 1f       	adc	r24, r25
 8fa:	9a 1f       	adc	r25, r26
 8fc:	a1 1d       	adc	r26, r1
 8fe:	68 0f       	add	r22, r24
 900:	79 1f       	adc	r23, r25
 902:	8a 1f       	adc	r24, r26
 904:	91 1d       	adc	r25, r1
 906:	a1 1d       	adc	r26, r1
 908:	6a 0f       	add	r22, r26
 90a:	71 1d       	adc	r23, r1
 90c:	81 1d       	adc	r24, r1
 90e:	91 1d       	adc	r25, r1
 910:	a1 1d       	adc	r26, r1
 912:	20 d0       	rcall	.+64     	; 0x954 <__stack+0x55>
 914:	09 f4       	brne	.+2      	; 0x918 <__stack+0x19>
 916:	68 94       	set
 918:	3f 91       	pop	r19
 91a:	2a e0       	ldi	r18, 0x0A	; 10
 91c:	26 9f       	mul	r18, r22
 91e:	11 24       	eor	r1, r1
 920:	30 19       	sub	r19, r0
 922:	30 5d       	subi	r19, 0xD0	; 208
 924:	31 93       	st	Z+, r19
 926:	de f6       	brtc	.-74     	; 0x8de <__ultoa_invert+0xe>
 928:	cf 01       	movw	r24, r30
 92a:	08 95       	ret
 92c:	46 2f       	mov	r20, r22
 92e:	47 70       	andi	r20, 0x07	; 7
 930:	40 5d       	subi	r20, 0xD0	; 208
 932:	41 93       	st	Z+, r20
 934:	b3 e0       	ldi	r27, 0x03	; 3
 936:	0f d0       	rcall	.+30     	; 0x956 <__stack+0x57>
 938:	c9 f7       	brne	.-14     	; 0x92c <__stack+0x2d>
 93a:	f6 cf       	rjmp	.-20     	; 0x928 <__stack+0x29>
 93c:	46 2f       	mov	r20, r22
 93e:	4f 70       	andi	r20, 0x0F	; 15
 940:	40 5d       	subi	r20, 0xD0	; 208
 942:	4a 33       	cpi	r20, 0x3A	; 58
 944:	18 f0       	brcs	.+6      	; 0x94c <__stack+0x4d>
 946:	49 5d       	subi	r20, 0xD9	; 217
 948:	31 fd       	sbrc	r19, 1
 94a:	40 52       	subi	r20, 0x20	; 32
 94c:	41 93       	st	Z+, r20
 94e:	02 d0       	rcall	.+4      	; 0x954 <__stack+0x55>
 950:	a9 f7       	brne	.-22     	; 0x93c <__stack+0x3d>
 952:	ea cf       	rjmp	.-44     	; 0x928 <__stack+0x29>
 954:	b4 e0       	ldi	r27, 0x04	; 4
 956:	a6 95       	lsr	r26
 958:	97 95       	ror	r25
 95a:	87 95       	ror	r24
 95c:	77 95       	ror	r23
 95e:	67 95       	ror	r22
 960:	ba 95       	dec	r27
 962:	c9 f7       	brne	.-14     	; 0x956 <__stack+0x57>
 964:	00 97       	sbiw	r24, 0x00	; 0
 966:	61 05       	cpc	r22, r1
 968:	71 05       	cpc	r23, r1
 96a:	08 95       	ret
 96c:	9b 01       	movw	r18, r22
 96e:	ac 01       	movw	r20, r24
 970:	0a 2e       	mov	r0, r26
 972:	06 94       	lsr	r0
 974:	57 95       	ror	r21
 976:	47 95       	ror	r20
 978:	37 95       	ror	r19
 97a:	27 95       	ror	r18
 97c:	ba 95       	dec	r27
 97e:	c9 f7       	brne	.-14     	; 0x972 <__stack+0x73>
 980:	62 0f       	add	r22, r18
 982:	73 1f       	adc	r23, r19
 984:	84 1f       	adc	r24, r20
 986:	95 1f       	adc	r25, r21
 988:	a0 1d       	adc	r26, r0
 98a:	08 95       	ret

0000098c <__prologue_saves__>:
 98c:	2f 92       	push	r2
 98e:	3f 92       	push	r3
 990:	4f 92       	push	r4
 992:	5f 92       	push	r5
 994:	6f 92       	push	r6
 996:	7f 92       	push	r7
 998:	8f 92       	push	r8
 99a:	9f 92       	push	r9
 99c:	af 92       	push	r10
 99e:	bf 92       	push	r11
 9a0:	cf 92       	push	r12
 9a2:	df 92       	push	r13
 9a4:	ef 92       	push	r14
 9a6:	ff 92       	push	r15
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	cd b7       	in	r28, 0x3d	; 61
 9b2:	de b7       	in	r29, 0x3e	; 62
 9b4:	ca 1b       	sub	r28, r26
 9b6:	db 0b       	sbc	r29, r27
 9b8:	0f b6       	in	r0, 0x3f	; 63
 9ba:	f8 94       	cli
 9bc:	de bf       	out	0x3e, r29	; 62
 9be:	0f be       	out	0x3f, r0	; 63
 9c0:	cd bf       	out	0x3d, r28	; 61
 9c2:	09 94       	ijmp

000009c4 <__epilogue_restores__>:
 9c4:	2a 88       	ldd	r2, Y+18	; 0x12
 9c6:	39 88       	ldd	r3, Y+17	; 0x11
 9c8:	48 88       	ldd	r4, Y+16	; 0x10
 9ca:	5f 84       	ldd	r5, Y+15	; 0x0f
 9cc:	6e 84       	ldd	r6, Y+14	; 0x0e
 9ce:	7d 84       	ldd	r7, Y+13	; 0x0d
 9d0:	8c 84       	ldd	r8, Y+12	; 0x0c
 9d2:	9b 84       	ldd	r9, Y+11	; 0x0b
 9d4:	aa 84       	ldd	r10, Y+10	; 0x0a
 9d6:	b9 84       	ldd	r11, Y+9	; 0x09
 9d8:	c8 84       	ldd	r12, Y+8	; 0x08
 9da:	df 80       	ldd	r13, Y+7	; 0x07
 9dc:	ee 80       	ldd	r14, Y+6	; 0x06
 9de:	fd 80       	ldd	r15, Y+5	; 0x05
 9e0:	0c 81       	ldd	r16, Y+4	; 0x04
 9e2:	1b 81       	ldd	r17, Y+3	; 0x03
 9e4:	aa 81       	ldd	r26, Y+2	; 0x02
 9e6:	b9 81       	ldd	r27, Y+1	; 0x01
 9e8:	ce 0f       	add	r28, r30
 9ea:	d1 1d       	adc	r29, r1
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	f8 94       	cli
 9f0:	de bf       	out	0x3e, r29	; 62
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	cd bf       	out	0x3d, r28	; 61
 9f6:	ed 01       	movw	r28, r26
 9f8:	08 95       	ret

000009fa <_exit>:
 9fa:	f8 94       	cli

000009fc <__stop_program>:
 9fc:	ff cf       	rjmp	.-2      	; 0x9fc <__stop_program>
