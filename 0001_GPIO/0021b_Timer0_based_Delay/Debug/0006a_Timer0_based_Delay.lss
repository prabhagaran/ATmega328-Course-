
0006a_Timer0_based_Delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f0  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025d  00000000  00000000  00000f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <T0delayOnems>:
}


void T0delayOnems(){
	//setup Timer 0
	TCNT0 = 248;		//load count value for 1ms time delay
  80:	88 ef       	ldi	r24, 0xF8	; 248
  82:	86 bd       	out	0x26, r24	; 38
	TCCR0A = 0x00;
  84:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);  //0b00000101;	//normal mode with 1024 pre-scalar
  86:	85 b5       	in	r24, 0x25	; 37
  88:	85 60       	ori	r24, 0x05	; 5
  8a:	85 bd       	out	0x25, r24	; 37
	
	while(!(TIFR0 & (1<<TOV0)));	//wait until TOV0 flag is set
  8c:	a8 9b       	sbis	0x15, 0	; 21
  8e:	fe cf       	rjmp	.-4      	; 0x8c <T0delayOnems+0xc>
	TCCR0B = 0;		//turn off timer 0
  90:	15 bc       	out	0x25, r1	; 37
	TIFR0 |= (1<<TOV0);	//clear TOV0 flag
  92:	85 b3       	in	r24, 0x15	; 21
  94:	81 60       	ori	r24, 0x01	; 1
  96:	85 bb       	out	0x15, r24	; 21
  98:	08 95       	ret

0000009a <T0delayms>:
}

void T0delayms(int n){
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	8c 01       	movw	r16, r24
	for(int i = 0; i <= n; i++){
  a4:	c0 e0       	ldi	r28, 0x00	; 0
  a6:	d0 e0       	ldi	r29, 0x00	; 0
  a8:	03 c0       	rjmp	.+6      	; 0xb0 <T0delayms+0x16>
		T0delayOnems();
  aa:	0e 94 40 00 	call	0x80	; 0x80 <T0delayOnems>
	TCCR0B = 0;		//turn off timer 0
	TIFR0 |= (1<<TOV0);	//clear TOV0 flag
}

void T0delayms(int n){
	for(int i = 0; i <= n; i++){
  ae:	21 96       	adiw	r28, 0x01	; 1
  b0:	0c 17       	cp	r16, r28
  b2:	1d 07       	cpc	r17, r29
  b4:	d4 f7       	brge	.-12     	; 0xaa <T0delayms+0x10>
		T0delayOnems();
	}
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	1f 91       	pop	r17
  bc:	0f 91       	pop	r16
  be:	08 95       	ret

000000c0 <main>:
void T0delayms(int n);


int main()
{
	DDRB |= (1<<LED);
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	84 b9       	out	0x04, r24	; 4
	
	while (1){
		PORTB ^= (1<<LED);
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	89 27       	eor	r24, r25
  cc:	85 b9       	out	0x05, r24	; 5
		T0delayms(1000);
  ce:	88 ee       	ldi	r24, 0xE8	; 232
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	0e 94 4d 00 	call	0x9a	; 0x9a <T0delayms>
  d6:	f7 cf       	rjmp	.-18     	; 0xc6 <main+0x6>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
