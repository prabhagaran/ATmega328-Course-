
0006c_Timer2_based_Delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f0  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025d  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <T2delayOnems>:
    return 0;
}

void T2delayOnems() {
    // Setup Timer 2
    TCNT2 = 248; // Load count value for 1ms time delay
  80:	88 ef       	ldi	r24, 0xF8	; 248
  82:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    TCCR2A = 0x00;
  86:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    TCCR2B = (1 << CS22) | (1 << CS20); // Normal mode with 1024 prescaler
  8a:	85 e0       	ldi	r24, 0x05	; 5
  8c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

    while (!(TIFR2 & (1 << TOV2))); // Wait until TOV2 flag is set
  90:	b8 9b       	sbis	0x17, 0	; 23
  92:	fe cf       	rjmp	.-4      	; 0x90 <T2delayOnems+0x10>
    TCCR2B = 0; // Turn off Timer 2
  94:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    TIFR2 |= (1 << TOV2); // Clear TOV2 flag
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	87 bb       	out	0x17, r24	; 23
  9e:	08 95       	ret

000000a0 <T2delayms>:
}

void T2delayms(int n) {
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	8c 01       	movw	r16, r24
    for (int i = 0; i < n; i++) {
  aa:	c0 e0       	ldi	r28, 0x00	; 0
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <T2delayms+0x16>
        T2delayOnems();
  b0:	0e 94 40 00 	call	0x80	; 0x80 <T2delayOnems>
    TCCR2B = 0; // Turn off Timer 2
    TIFR2 |= (1 << TOV2); // Clear TOV2 flag
}

void T2delayms(int n) {
    for (int i = 0; i < n; i++) {
  b4:	21 96       	adiw	r28, 0x01	; 1
  b6:	c0 17       	cp	r28, r16
  b8:	d1 07       	cpc	r29, r17
  ba:	d4 f3       	brlt	.-12     	; 0xb0 <T2delayms+0x10>
        T2delayOnems();
    }
}
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	08 95       	ret

000000c6 <main>:

void T2delayOnems(void);
void T2delayms(int n);

int main() {
    DDRB |= (1 << LED); // Set LED pin as output
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	84 b9       	out	0x04, r24	; 4

    while (1) {
        PORTB ^= (1 << LED); // Toggle the LED
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	80 e2       	ldi	r24, 0x20	; 32
  d0:	89 27       	eor	r24, r25
  d2:	85 b9       	out	0x05, r24	; 5
        T2delayms(1000); // Delay for 1000 milliseconds (1 second)
  d4:	88 ee       	ldi	r24, 0xE8	; 232
  d6:	93 e0       	ldi	r25, 0x03	; 3
  d8:	0e 94 50 00 	call	0xa0	; 0xa0 <T2delayms>
  dc:	f7 cf       	rjmp	.-18     	; 0xcc <main+0x6>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
