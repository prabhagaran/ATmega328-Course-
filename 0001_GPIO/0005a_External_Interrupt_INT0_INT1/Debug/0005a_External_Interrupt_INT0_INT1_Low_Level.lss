
0005a_External_Interrupt_INT0_INT1_Low_Level.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d3  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  000008b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024b  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <externalInterruptInit>:
#define LED_PIN PB5

// Function to initialize external interrupt INT0
void externalInterruptInit() {
	// Set the BUTTON_PIN (PD2) as input
	DDRD &= ~(1 << BUTTON_PIN);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8b 7f       	andi	r24, 0xFB	; 251
  84:	8a b9       	out	0x0a, r24	; 10

	// Enable the internal pull-up resistor for the BUTTON_PIN
	PORTD |= (1 << BUTTON_PIN);
  86:	8b b1       	in	r24, 0x0b	; 11
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	8b b9       	out	0x0b, r24	; 11

	// Configure the external interrupt INT0 to trigger on falling edge
	EICRA |= (1 << ISC01);  // Trigger on falling edge
  8c:	e9 e6       	ldi	r30, 0x69	; 105
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	82 60       	ori	r24, 0x02	; 2
  94:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC00); // Trigger on falling edge
  96:	80 81       	ld	r24, Z
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   // Enable INT0 interrupt
  9c:	8d b3       	in	r24, 0x1d	; 29
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	8d bb       	out	0x1d, r24	; 29
  a2:	08 95       	ret

000000a4 <ledInit>:
}

// Function to initialize the LED pin
void ledInit() {
	// Set the LED_PIN (PB5) as an output
	DDRB |= (1 << LED_PIN);
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	84 b9       	out	0x04, r24	; 4
  aa:	08 95       	ret

000000ac <main>:
}

int main(void) {
	externalInterruptInit(); // Initialize external interrupt
  ac:	0e 94 40 00 	call	0x80	; 0x80 <externalInterruptInit>
	ledInit(); // Initialize LED pin
  b0:	0e 94 52 00 	call	0xa4	; 0xa4 <ledInit>

	// Enable global interrupts
	sei();
  b4:	78 94       	sei
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0xa>

000000b8 <__vector_1>:
	}
	return 0;
}

// External interrupt service routine for INT0
ISR(INT0_vect) {
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
	// Check if the button is pressed
	if (!(PIND & (1 << BUTTON_PIN))) {
  c4:	4a 99       	sbic	0x09, 2	; 9
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <__vector_1+0x18>
		// Button is pressed; turn on the LED
		PORTB |= (1 << LED_PIN);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <__vector_1+0x1e>
		} else {
		// Button is released; turn off the LED
		PORTB &= ~(1 << LED_PIN);
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8f 7d       	andi	r24, 0xDF	; 223
  d4:	85 b9       	out	0x05, r24	; 5
	}
}
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
