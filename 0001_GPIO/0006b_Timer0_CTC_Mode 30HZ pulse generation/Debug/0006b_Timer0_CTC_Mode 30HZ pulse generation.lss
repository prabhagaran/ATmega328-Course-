
0006b_Timer0_CTC_Mode 30HZ pulse generation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ff  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000667  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000 // Define the clock frequency for delay functions
#include <avr/io.h> // AVR Standard I/O Library
#include <util/delay.h> // AVR Delay Functions Library

int main(void) {
    DDRD |= (1 << DDD5); // Set PD5 as output for OC0B (PWM output)
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 62       	ori	r24, 0x20	; 32
  84:	8a b9       	out	0x0a, r24	; 10
    DDRD |= (1 << DDD6); // Set PD6 as output for OC0A (optional)
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	8a b9       	out	0x0a, r24	; 10

    // Set CTC mode for Timer/Counter 0 (WGM01 = 1)
    TCCR0A |= (1 << WGM01);
  8c:	84 b5       	in	r24, 0x24	; 36
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	84 bd       	out	0x24, r24	; 36

    // Set toggle mode for OC0B (COM0B1 = 0, COM0B0 = 1)
    TCCR0A |= (1 << COM0A0) | (1 << COM0B0);
  92:	84 b5       	in	r24, 0x24	; 36
  94:	80 65       	ori	r24, 0x50	; 80
  96:	84 bd       	out	0x24, r24	; 36

    // Set the compare value (adjust as needed)
    OCR0A = 255; // Example value
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	87 bd       	out	0x27, r24	; 39

    // Set the prescaler (adjust as needed)
    TCCR0B |= (1 << CS02) | (1 << CS00); // Prescaler = 1024
  9c:	85 b5       	in	r24, 0x25	; 37
  9e:	85 60       	ori	r24, 0x05	; 5
  a0:	85 bd       	out	0x25, r24	; 37

    while (1) {
        // Polling method: Check if Timer/Counter 0 compare match flag is set
        if (TIFR0 & (1 << OCF0A)) {
  a2:	a9 9b       	sbis	0x15, 1	; 21
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <main+0x22>
            // Clear the compare match flag by writing a logic one to it
            TIFR0 |= (1 << OCF0A);
  a6:	85 b3       	in	r24, 0x15	; 21
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	89 e6       	ldi	r24, 0x69	; 105
  b0:	98 e1       	ldi	r25, 0x18	; 24
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
  be:	f1 cf       	rjmp	.-30     	; 0xa2 <main+0x22>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
