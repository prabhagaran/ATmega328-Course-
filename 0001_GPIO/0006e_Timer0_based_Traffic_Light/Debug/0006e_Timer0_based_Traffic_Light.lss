
0006e_Timer0_based_Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000017e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000718  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000689  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025f  00000000  00000000  00000fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000384  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000165d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Timer0_Init>:

volatile uint16_t msCounter = 0;

// Function to initialize Timer0
void Timer0_Init() {
    TCCR0A = (1 << WGM01);      // Set Timer/Counter0 to CTC mode
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1 << CS02);       // Prescaler 1024
  94:	94 e0       	ldi	r25, 0x04	; 4
  96:	95 bd       	out	0x25, r25	; 37
    OCR0A = 250 - 1;            // Set compare value for 1ms interrupt at 16MHz with 1024 prescaler
  98:	99 ef       	ldi	r25, 0xF9	; 249
  9a:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1 << OCIE0A);     // Enable Timer/Counter0 Output Compare Match A Interrupt
  9c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  a0:	08 95       	ret

000000a2 <Timer0_DelayMS>:
}

// Function to generate a delay in milliseconds using Timer0
void Timer0_DelayMS(uint16_t milliseconds) {
    msCounter = 0;
  a2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  a6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    while (msCounter < milliseconds) {
  aa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ae:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b2:	28 17       	cp	r18, r24
  b4:	39 07       	cpc	r19, r25
  b6:	c8 f3       	brcs	.-14     	; 0xaa <Timer0_DelayMS+0x8>
        // Wait for the desired number of milliseconds
    }
}
  b8:	08 95       	ret

000000ba <__vector_14>:

// Timer0 compare match ISR (Interrupt Service Routine)
ISR(TIMER0_COMPA_vect) {
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
    msCounter++;    // Increment the millisecond counter
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <main>:

int main() {
    DDRB |= (1 << LED); // Set PB5 as an output for the LED
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	84 b9       	out	0x04, r24	; 4

    // Initialize Timer0
    Timer0_Init();
  ee:	0e 94 48 00 	call	0x90	; 0x90 <Timer0_Init>

    // Enable global interrupts
    sei();
  f2:	78 94       	sei

    while (1) {
        PORTB ^= (1 << LED);    // Toggle the LED
  f4:	95 b1       	in	r25, 0x05	; 5
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	89 27       	eor	r24, r25
  fa:	85 b9       	out	0x05, r24	; 5
        Timer0_DelayMS(100);    // Delay for 100 milliseconds
  fc:	84 e6       	ldi	r24, 0x64	; 100
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 51 00 	call	0xa2	; 0xa2 <Timer0_DelayMS>
 104:	f7 cf       	rjmp	.-18     	; 0xf4 <main+0xc>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
