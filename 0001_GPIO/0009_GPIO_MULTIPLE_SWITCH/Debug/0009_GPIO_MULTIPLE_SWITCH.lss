
0009_GPIO_MULTIPLE_SWITCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000338  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000003ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000816  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000726  00000000  00000000  00000c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000481  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022d  00000000  00000000  00001c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	5b 00       	.word	0x005b	; ????
  6a:	6e 00       	.word	0x006e	; ????
  6c:	75 00       	.word	0x0075	; ????
  6e:	85 00       	.word	0x0085	; ????
  70:	95 00       	.word	0x0095	; ????
  72:	a2 00       	.word	0x00a2	; ????
  74:	b2 00       	.word	0x00b2	; ????
  76:	c5 00       	.word	0x00c5	; ????
  78:	cf 00       	.word	0x00cf	; ????
  7a:	e5 00       	.word	0x00e5	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  9c:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <printNumbers>:
#define SEG_DP_PIN      PB3
int count = 0;

void printNumbers(int num)
{
	switch (num)
  a4:	8a 30       	cpi	r24, 0x0A	; 10
  a6:	91 05       	cpc	r25, r1
  a8:	08 f0       	brcs	.+2      	; 0xac <printNumbers+0x8>
  aa:	a1 c0       	rjmp	.+322    	; 0x1ee <printNumbers+0x14a>
  ac:	fc 01       	movw	r30, r24
  ae:	ec 5c       	subi	r30, 0xCC	; 204
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	0c 94 80 01 	jmp	0x300	; 0x300 <__tablejump2__>
	{
		case 0:
		PORTD &= ~(1U << SEG_A_PIN);
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	8f 7e       	andi	r24, 0xEF	; 239
  ba:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
  c2:	8b b1       	in	r24, 0x0b	; 11
  c4:	8f 7b       	andi	r24, 0xBF	; 191
  c6:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_E_PIN);
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	8e 7f       	andi	r24, 0xFE	; 254
  d2:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_F_PIN);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	85 b9       	out	0x05, r24	; 5
		break;
  da:	08 95       	ret
		case 1:
		PORTD &= ~(1U << SEG_B_PIN);
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	8f 7d       	andi	r24, 0xDF	; 223
  e0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8f 7b       	andi	r24, 0xBF	; 191
  e6:	8b b9       	out	0x0b, r24	; 11
		break;
  e8:	08 95       	ret
		case 2:
		PORTD &= ~(1U << SEG_A_PIN);
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 7e       	andi	r24, 0xEF	; 239
  ee:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7d       	andi	r24, 0xDF	; 223
  f4:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 77       	andi	r24, 0x7F	; 127
  fa:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_E_PIN);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	85 b9       	out	0x05, r24	; 5
		break;
 108:	08 95       	ret
		case 3:
		PORTD &= ~(1U << SEG_A_PIN);
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	8f 7d       	andi	r24, 0xDF	; 223
 114:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	8f 7b       	andi	r24, 0xBF	; 191
 11a:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8f 77       	andi	r24, 0x7F	; 127
 120:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_G_PIN);
 122:	85 b1       	in	r24, 0x05	; 5
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	85 b9       	out	0x05, r24	; 5
		break;
 128:	08 95       	ret
		case 4:
		
		PORTD &= ~(1U << SEG_B_PIN);
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	8f 7d       	andi	r24, 0xDF	; 223
 12e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_F_PIN);
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	85 b9       	out	0x05, r24	; 5
		break;
 142:	08 95       	ret
		case 5:
		PORTD &= ~(1U << SEG_A_PIN);
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8f 7b       	andi	r24, 0xBF	; 191
 14e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	8f 77       	andi	r24, 0x7F	; 127
 154:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_F_PIN);
 156:	85 b1       	in	r24, 0x05	; 5
 158:	8d 7f       	andi	r24, 0xFD	; 253
 15a:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	8b 7f       	andi	r24, 0xFB	; 251
 160:	85 b9       	out	0x05, r24	; 5
		break;
 162:	08 95       	ret
		case 6:
		//6
		PORTD &= ~(1U << SEG_A_PIN);
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	8f 7e       	andi	r24, 0xEF	; 239
 168:	8b b9       	out	0x0b, r24	; 11
		//PORTD &= ~(1U << SEG_B_PIN);
		PORTD &= ~(1U << SEG_C_PIN);
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8f 7b       	andi	r24, 0xBF	; 191
 16e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	8f 77       	andi	r24, 0x7F	; 127
 174:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_E_PIN);
 176:	85 b1       	in	r24, 0x05	; 5
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_F_PIN);
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	8d 7f       	andi	r24, 0xFD	; 253
 180:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 182:	85 b1       	in	r24, 0x05	; 5
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	85 b9       	out	0x05, r24	; 5
		break;
 188:	08 95       	ret
		case 7:
		//7
		PORTD &= ~(1U << SEG_A_PIN);
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	8f 7d       	andi	r24, 0xDF	; 223
 194:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	8f 7b       	andi	r24, 0xBF	; 191
 19a:	8b b9       	out	0x0b, r24	; 11
		break;
 19c:	08 95       	ret
		case 8:
		//8
		PORTD &= ~(1U << SEG_A_PIN);
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8f 7e       	andi	r24, 0xEF	; 239
 1a2:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	8f 7d       	andi	r24, 0xDF	; 223
 1a8:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	8f 7b       	andi	r24, 0xBF	; 191
 1ae:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 77       	andi	r24, 0x7F	; 127
 1b4:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_E_PIN);
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	8e 7f       	andi	r24, 0xFE	; 254
 1ba:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_F_PIN);
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	8d 7f       	andi	r24, 0xFD	; 253
 1c0:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 1c2:	85 b1       	in	r24, 0x05	; 5
 1c4:	8b 7f       	andi	r24, 0xFB	; 251
 1c6:	85 b9       	out	0x05, r24	; 5
		break;
 1c8:	08 95       	ret
		case 9:
		//9
		PORTD &= ~(1U << SEG_A_PIN);
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	8f 7e       	andi	r24, 0xEF	; 239
 1ce:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	8f 7d       	andi	r24, 0xDF	; 223
 1d4:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	8f 7b       	andi	r24, 0xBF	; 191
 1da:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	8f 77       	andi	r24, 0x7F	; 127
 1e0:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_F_PIN);
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	8d 7f       	andi	r24, 0xFD	; 253
 1e6:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	85 b9       	out	0x05, r24	; 5
 1ee:	08 95       	ret

000001f0 <all_segment_off>:
	
}

void all_segment_off(void)
{
	PORTD |= (1U << SEG_A_PIN) | (1U << SEG_B_PIN) |(1U << SEG_C_PIN) | (1U << SEG_D_PIN) ;
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	80 6f       	ori	r24, 0xF0	; 240
 1f4:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1U << SEG_E_PIN) | (1U << SEG_F_PIN) |(1U << SEG_G_PIN) | (1U << SEG_DP_PIN);
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	8f 60       	ori	r24, 0x0F	; 15
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	08 95       	ret

000001fe <initializeIO>:
}

void initializeIO() {
	// Set buttons as inputs and enable pull-up resistors
	DDRC &= ~((1 << BUTTON1_PIN) | (1 << BUTTON2_PIN));
 1fe:	87 b1       	in	r24, 0x07	; 7
 200:	8c 7f       	andi	r24, 0xFC	; 252
 202:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << BUTTON1_PIN) | (1 << BUTTON2_PIN);
 204:	88 b1       	in	r24, 0x08	; 8
 206:	83 60       	ori	r24, 0x03	; 3
 208:	88 b9       	out	0x08, r24	; 8
	DDRD |= (1U << SEG_A_PIN) | (1U << SEG_B_PIN) | (1U << SEG_C_PIN) | (1U << SEG_D_PIN) ;
 20a:	8a b1       	in	r24, 0x0a	; 10
 20c:	80 6f       	ori	r24, 0xF0	; 240
 20e:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1U << SEG_E_PIN) | (1U << SEG_F_PIN) | (1U << SEG_G_PIN) | (1U << SEG_DP_PIN);
 210:	84 b1       	in	r24, 0x04	; 4
 212:	8f 60       	ori	r24, 0x0F	; 15
 214:	84 b9       	out	0x04, r24	; 4

	// Set LEDs as outputs
	DDRB |= (1 << LED1_PIN) | (1 << LED2_PIN);
 216:	84 b1       	in	r24, 0x04	; 4
 218:	80 63       	ori	r24, 0x30	; 48
 21a:	84 b9       	out	0x04, r24	; 4
 21c:	08 95       	ret

0000021e <debounceButton>:
}

int debounceButton(uint8_t buttonPin) {
	int prevState = 1;
	int currentState;
	int stableCount = 0;
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	70 e0       	ldi	r23, 0x00	; 0
	// Set LEDs as outputs
	DDRB |= (1 << LED1_PIN) | (1 << LED2_PIN);
}

int debounceButton(uint8_t buttonPin) {
	int prevState = 1;
 222:	e1 e0       	ldi	r30, 0x01	; 1
 224:	f0 e0       	ldi	r31, 0x00	; 0
	int currentState;
	int stableCount = 0;

	while (stableCount < 5) {
 226:	1c c0       	rjmp	.+56     	; 0x260 <debounceButton+0x42>
		currentState = PINC & (1 << buttonPin);
 228:	26 b1       	in	r18, 0x06	; 6
 22a:	42 2f       	mov	r20, r18
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	08 2e       	mov	r0, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <debounceButton+0x1c>
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <debounceButton+0x18>
 23e:	24 23       	and	r18, r20
 240:	35 23       	and	r19, r21
		if (currentState == prevState) {
 242:	e2 17       	cp	r30, r18
 244:	f3 07       	cpc	r31, r19
 246:	19 f4       	brne	.+6      	; 0x24e <debounceButton+0x30>
			stableCount++;
 248:	6f 5f       	subi	r22, 0xFF	; 255
 24a:	7f 4f       	sbci	r23, 0xFF	; 255
 24c:	02 c0       	rjmp	.+4      	; 0x252 <debounceButton+0x34>
			} else {
			stableCount = 0;
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	ef e3       	ldi	r30, 0x3F	; 63
 254:	fc e9       	ldi	r31, 0x9C	; 156
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <debounceButton+0x38>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <debounceButton+0x3e>
 25c:	00 00       	nop
		}
		prevState = currentState;
 25e:	f9 01       	movw	r30, r18
int debounceButton(uint8_t buttonPin) {
	int prevState = 1;
	int currentState;
	int stableCount = 0;

	while (stableCount < 5) {
 260:	65 30       	cpi	r22, 0x05	; 5
 262:	71 05       	cpc	r23, r1
 264:	0c f3       	brlt	.-62     	; 0x228 <debounceButton+0xa>
		prevState = currentState;
		_delay_ms(10); // Small delay for stability and responsiveness
	}

	return currentState;
}
 266:	c9 01       	movw	r24, r18
 268:	08 95       	ret

0000026a <main>:

int main(void) {
	initializeIO();
 26a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <initializeIO>

	while (1) {
		// Check if Button 1 is pressed
		if (debounceButton(BUTTON1_PIN) == 0) {
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 0f 01 	call	0x21e	; 0x21e <debounceButton>
 274:	89 2b       	or	r24, r25
 276:	a9 f4       	brne	.+42     	; 0x2a2 <main+0x38>
			count = (count + 1) % 10;
 278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	6a e0       	ldi	r22, 0x0A	; 10
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__divmodhi4>
 28a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 28e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			all_segment_off();
 292:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <all_segment_off>
			printNumbers(count);
 296:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 29a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29e:	0e 94 52 00 	call	0xa4	; 0xa4 <printNumbers>
			
		}

		// Check if Button 2 is pressed
		if (debounceButton(BUTTON2_PIN) == 0) {
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 0f 01 	call	0x21e	; 0x21e <debounceButton>
 2a8:	89 2b       	or	r24, r25
 2aa:	09 f7       	brne	.-62     	; 0x26e <main+0x4>
			count = (count - 1 + 10) % 10;
 2ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2b4:	09 96       	adiw	r24, 0x09	; 9
 2b6:	6a e0       	ldi	r22, 0x0A	; 10
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__divmodhi4>
 2be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			all_segment_off();
 2c6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <all_segment_off>
			printNumbers(count);
 2ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d2:	0e 94 52 00 	call	0xa4	; 0xa4 <printNumbers>
 2d6:	cb cf       	rjmp	.-106    	; 0x26e <main+0x4>

000002d8 <__divmodhi4>:
 2d8:	97 fb       	bst	r25, 7
 2da:	07 2e       	mov	r0, r23
 2dc:	16 f4       	brtc	.+4      	; 0x2e2 <__divmodhi4+0xa>
 2de:	00 94       	com	r0
 2e0:	07 d0       	rcall	.+14     	; 0x2f0 <__divmodhi4_neg1>
 2e2:	77 fd       	sbrc	r23, 7
 2e4:	09 d0       	rcall	.+18     	; 0x2f8 <__divmodhi4_neg2>
 2e6:	0e 94 86 01 	call	0x30c	; 0x30c <__udivmodhi4>
 2ea:	07 fc       	sbrc	r0, 7
 2ec:	05 d0       	rcall	.+10     	; 0x2f8 <__divmodhi4_neg2>
 2ee:	3e f4       	brtc	.+14     	; 0x2fe <__divmodhi4_exit>

000002f0 <__divmodhi4_neg1>:
 2f0:	90 95       	com	r25
 2f2:	81 95       	neg	r24
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	08 95       	ret

000002f8 <__divmodhi4_neg2>:
 2f8:	70 95       	com	r23
 2fa:	61 95       	neg	r22
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255

000002fe <__divmodhi4_exit>:
 2fe:	08 95       	ret

00000300 <__tablejump2__>:
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	05 90       	lpm	r0, Z+
 306:	f4 91       	lpm	r31, Z
 308:	e0 2d       	mov	r30, r0
 30a:	09 94       	ijmp

0000030c <__udivmodhi4>:
 30c:	aa 1b       	sub	r26, r26
 30e:	bb 1b       	sub	r27, r27
 310:	51 e1       	ldi	r21, 0x11	; 17
 312:	07 c0       	rjmp	.+14     	; 0x322 <__udivmodhi4_ep>

00000314 <__udivmodhi4_loop>:
 314:	aa 1f       	adc	r26, r26
 316:	bb 1f       	adc	r27, r27
 318:	a6 17       	cp	r26, r22
 31a:	b7 07       	cpc	r27, r23
 31c:	10 f0       	brcs	.+4      	; 0x322 <__udivmodhi4_ep>
 31e:	a6 1b       	sub	r26, r22
 320:	b7 0b       	sbc	r27, r23

00000322 <__udivmodhi4_ep>:
 322:	88 1f       	adc	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	5a 95       	dec	r21
 328:	a9 f7       	brne	.-22     	; 0x314 <__udivmodhi4_loop>
 32a:	80 95       	com	r24
 32c:	90 95       	com	r25
 32e:	bc 01       	movw	r22, r24
 330:	cd 01       	movw	r24, r26
 332:	08 95       	ret

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
