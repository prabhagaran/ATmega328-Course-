
0006b_Timer0_CTC_Mode 30HZ pulse generation_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a8  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000231  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036a  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005e  00000000  00000000  0000148a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_15>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h> // AVR Standard I/O Library
#include <util/delay.h> // AVR Delay Functions Library
#include <avr/interrupt.h> // AVR Interrupts Library

int main(void) {
    DDRD |= (1 << DDD5); // Set PD5 as output for OC0B (PWM output)
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 62       	ori	r24, 0x20	; 32
  84:	8a b9       	out	0x0a, r24	; 10
    DDRD |= (1 << DDD6); // Set PD6 as output for OC0A (optional)
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	8a b9       	out	0x0a, r24	; 10

    // Set CTC mode for Timer/Counter 0 (WGM01 = 1)
    TCCR0A |= (1 << WGM01);
  8c:	84 b5       	in	r24, 0x24	; 36
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	84 bd       	out	0x24, r24	; 36

    // Set toggle mode for OC0B (COM0B1 = 0, COM0B0 = 1)
    TCCR0A |= (1 << COM0A0) | (1 << COM0B0);
  92:	84 b5       	in	r24, 0x24	; 36
  94:	80 65       	ori	r24, 0x50	; 80
  96:	84 bd       	out	0x24, r24	; 36

    // Set the compare value (adjust as needed)
    OCR0A = 255; // Example value
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	87 bd       	out	0x27, r24	; 39

    // Set the prescaler (adjust as needed)
    TCCR0B |= (1 << CS02) | (1 << CS00); // Prescaler = 1024
  9c:	85 b5       	in	r24, 0x25	; 37
  9e:	85 60       	ori	r24, 0x05	; 5
  a0:	85 bd       	out	0x25, r24	; 37

    // Enable Timer/Counter 0 output compare match A interrupt
    TIMSK0 |= (1 << OCIE0A);
  a2:	ee e6       	ldi	r30, 0x6E	; 110
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	80 83       	st	Z, r24
    // Enable Timer/Counter 0 output compare match B interrupt
    TIMSK0 |= (1 << OCIE0B);
  ac:	80 81       	ld	r24, Z
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	80 83       	st	Z, r24

    // Enable global interrupts
    sei();
  b2:	78 94       	sei
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x34>

000000b6 <__vector_14>:

    return 0;
}

// Timer/Counter 0 output compare match A ISR (Interrupt Service Routine)
ISR(TIMER0_COMPA_vect) {
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
    // Toggle OC0A pin
}
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_15>:

// Timer/Counter 0 output compare match B ISR (Interrupt Service Routine)
ISR(TIMER0_COMPB_vect) {
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
    // Toggle OC0B pin
}
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
