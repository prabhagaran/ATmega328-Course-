
0014_USART_COMMUCATION.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ef  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000708  00000000  00000000  00000a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e4  00000000  00000000  0000115b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c0  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003f  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001893  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 75 00 	call	0xea	; 0xea <main>
  78:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <uart_Init>:

// Function to initialize UART communication with specified baud rate
void uart_Init(uint32_t baud_rate)
{
    // Calculate the Baud Rate
    uint16_t ubrr = F_CPU / (16 * baud_rate) - 1;
  80:	dc 01       	movw	r26, r24
  82:	cb 01       	movw	r24, r22
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	aa 1f       	adc	r26, r26
  8a:	bb 1f       	adc	r27, r27
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	aa 1f       	adc	r26, r26
  92:	bb 1f       	adc	r27, r27
  94:	9c 01       	movw	r18, r24
  96:	ad 01       	movw	r20, r26
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	44 1f       	adc	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	44 1f       	adc	r20, r20
  a6:	55 1f       	adc	r21, r21
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	74 e2       	ldi	r23, 0x24	; 36
  ac:	84 ef       	ldi	r24, 0xF4	; 244
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 8f 00 	call	0x11e	; 0x11e <__udivmodsi4>
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	31 09       	sbc	r19, r1
    
    // Load the calculated USART Baud Rate Registers
    UBRR0H = (uint8_t)(ubrr >> 8);
  b8:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (uint8_t)ubrr;
  bc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    
    // Set Data Frame: 8 bits, 1 stop bit, no parity
    UCSR0C = (1U << UCSZ01) | (1 << UCSZ00);
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    
    // Enable the Transmitter and Receiver
    UCSR0B = (1U << TXEN0) | (1U << RXEN0);
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  cc:	08 95       	ret

000000ce <uart_transmit>:

// Function to transmit data via UART
void uart_transmit(uint8_t data)
{
    // Wait until the transmit buffer is empty
    while(!(UCSR0A & (1U << UDRE0))){}
  ce:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d2:	95 ff       	sbrs	r25, 5
  d4:	fc cf       	rjmp	.-8      	; 0xce <uart_transmit>
    
    // Load the value into the data register
    UDR0 = data;
  d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  da:	08 95       	ret

000000dc <uart_receive>:
}

// Function to receive data via UART
uint8_t uart_receive(void)
{
    while(!(UCSR0A & (1U << RXC0))){}
  dc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e0:	88 23       	and	r24, r24
  e2:	e4 f7       	brge	.-8      	; 0xdc <uart_receive>
    
    return UDR0;
  e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  e8:	08 95       	ret

000000ea <main>:

int main(void)
{
    /* Replace with your application code */
    uart_Init(9600); // Initialize UART with baud rate of 9600
  ea:	60 e8       	ldi	r22, 0x80	; 128
  ec:	75 e2       	ldi	r23, 0x25	; 37
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 40 00 	call	0x80	; 0x80 <uart_Init>
    uint8_t data;
    while (1) 
    {
        // Receive data from UART
        data = uart_receive();
  f6:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_receive>
        
        // Transmit received data back with carriage return ('\r') and line feed ('\n') characters
        uart_transmit(data);
  fa:	0e 94 67 00 	call	0xce	; 0xce <uart_transmit>
        uart_transmit('\r');
  fe:	8d e0       	ldi	r24, 0x0D	; 13
 100:	0e 94 67 00 	call	0xce	; 0xce <uart_transmit>
        uart_transmit('\n');
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	0e 94 67 00 	call	0xce	; 0xce <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	83 ed       	ldi	r24, 0xD3	; 211
 10e:	90 e3       	ldi	r25, 0x30	; 48
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x26>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x30>
 11a:	00 00       	nop
 11c:	ec cf       	rjmp	.-40     	; 0xf6 <main+0xc>

0000011e <__udivmodsi4>:
 11e:	a1 e2       	ldi	r26, 0x21	; 33
 120:	1a 2e       	mov	r1, r26
 122:	aa 1b       	sub	r26, r26
 124:	bb 1b       	sub	r27, r27
 126:	fd 01       	movw	r30, r26
 128:	0d c0       	rjmp	.+26     	; 0x144 <__udivmodsi4_ep>

0000012a <__udivmodsi4_loop>:
 12a:	aa 1f       	adc	r26, r26
 12c:	bb 1f       	adc	r27, r27
 12e:	ee 1f       	adc	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	a2 17       	cp	r26, r18
 134:	b3 07       	cpc	r27, r19
 136:	e4 07       	cpc	r30, r20
 138:	f5 07       	cpc	r31, r21
 13a:	20 f0       	brcs	.+8      	; 0x144 <__udivmodsi4_ep>
 13c:	a2 1b       	sub	r26, r18
 13e:	b3 0b       	sbc	r27, r19
 140:	e4 0b       	sbc	r30, r20
 142:	f5 0b       	sbc	r31, r21

00000144 <__udivmodsi4_ep>:
 144:	66 1f       	adc	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	88 1f       	adc	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	1a 94       	dec	r1
 14e:	69 f7       	brne	.-38     	; 0x12a <__udivmodsi4_loop>
 150:	60 95       	com	r22
 152:	70 95       	com	r23
 154:	80 95       	com	r24
 156:	90 95       	com	r25
 158:	9b 01       	movw	r18, r22
 15a:	ac 01       	movw	r20, r24
 15c:	bd 01       	movw	r22, r26
 15e:	cf 01       	movw	r24, r30
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
