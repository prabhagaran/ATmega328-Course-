
0019_USART_INTERRUPT_RX_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000408  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000047c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096c  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000706  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ed  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032d  00000000  00000000  00001f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_18>
  4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  88:	0c 94 02 02 	jmp	0x404	; 0x404 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <uartInit>:
uint8_t H_flag;
uint8_t F_H_flag;
uint8_t F_B_flag;
void uartInit(uint32_t baudRate)
{
	uint16_t ubrr = (F_CPU / (16 * baudRate)) - 1;
  90:	dc 01       	movw	r26, r24
  92:	cb 01       	movw	r24, r22
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	aa 1f       	adc	r26, r26
  9a:	bb 1f       	adc	r27, r27
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	aa 1f       	adc	r26, r26
  a2:	bb 1f       	adc	r27, r27
  a4:	9c 01       	movw	r18, r24
  a6:	ad 01       	movw	r20, r26
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	44 1f       	adc	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	44 1f       	adc	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	74 e2       	ldi	r23, 0x24	; 36
  bc:	84 ef       	ldi	r24, 0xF4	; 244
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodsi4>
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	31 09       	sbc	r19, r1
	
	UBRR0H = (uint8_t)(ubrr >> 8);
  c8:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)ubrr;
  cc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0C = (1U << UCSZ01) | (1U << UCSZ00);
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = (1U << RXEN0)  | (1U << TXEN0);
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	sei();
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <transmitterInterrupt>:
}

void transmitterInterrupt(uint8_t data)
{
	
	transmitterbuffer = data;
  e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <transmitterbuffer>
	UCSR0B |= (1U << UDRIE0);
  e4:	e1 ec       	ldi	r30, 0xC1	; 193
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRB |= (1U << PB4);
  f0:	84 b1       	in	r24, 0x04	; 4
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1U << PB5);
  f6:	84 b1       	in	r24, 0x04	; 4
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	84 b9       	out	0x04, r24	; 4
	
	
	DDRD |= (1U << PD3);
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1U << PD4);
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	80 61       	ori	r24, 0x10	; 16
 106:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1U << PD5);
 108:	8a b1       	in	r24, 0x0a	; 10
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1U << PD6);
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8a b9       	out	0x0a, r24	; 10
	
	uartInit(9600);
 114:	60 e8       	ldi	r22, 0x80	; 128
 116:	75 e2       	ldi	r23, 0x25	; 37
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 48 00 	call	0x90	; 0x90 <uartInit>
	UCSR0B |= (1U << RXCIE0);
 120:	e1 ec       	ldi	r30, 0xC1	; 193
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 68       	ori	r24, 0x80	; 128
 128:	80 83       	st	Z, r24
	
    while (1) 
    {
		if(F_H_flag == 1 && H_flag == 1)
 12a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <F_H_flag>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	e9 f4       	brne	.+58     	; 0x16c <main+0x7c>
 132:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <H_flag>
 136:	91 30       	cpi	r25, 0x01	; 1
 138:	c9 f4       	brne	.+50     	; 0x16c <main+0x7c>
		{
			PORTB |=  (1U << PB4) | (1U << PB5);
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	80 63       	ori	r24, 0x30	; 48
 13e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	89 e6       	ldi	r24, 0x69	; 105
 144:	98 e1       	ldi	r25, 0x18	; 24
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x56>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x60>
 150:	00 00       	nop
			_delay_ms(500);
			PORTB &= ~(1U << PB4) & ~(1U << PB5);
 152:	85 b1       	in	r24, 0x05	; 5
 154:	8f 7c       	andi	r24, 0xCF	; 207
 156:	85 b9       	out	0x05, r24	; 5
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	89 e6       	ldi	r24, 0x69	; 105
 15c:	98 e1       	ldi	r25, 0x18	; 24
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x6e>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x78>
 168:	00 00       	nop
 16a:	0c c0       	rjmp	.+24     	; 0x184 <main+0x94>
			_delay_ms(500);
		
		}
		else if(F_H_flag == 1 && H_flag == 0)
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	51 f4       	brne	.+20     	; 0x184 <main+0x94>
 170:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <H_flag>
 174:	81 11       	cpse	r24, r1
 176:	06 c0       	rjmp	.+12     	; 0x184 <main+0x94>
		{
			PORTB &=  ~(1U << PB4) & ~(1U << PB5);
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	8f 7c       	andi	r24, 0xCF	; 207
 17c:	85 b9       	out	0x05, r24	; 5
			
			PORTB &= ~(1U << PB4) & ~(1U << PB5);
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	8f 7c       	andi	r24, 0xCF	; 207
 182:	85 b9       	out	0x05, r24	; 5
			
		}
		
		if (R_Indicatorflg == 1 && L_Indicatorflg == 0)
 184:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <R_Indicatorflg>
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	19 f5       	brne	.+70     	; 0x1d2 <main+0xe2>
 18c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 190:	91 11       	cpse	r25, r1
 192:	1f c0       	rjmp	.+62     	; 0x1d2 <main+0xe2>
		{
			PORTB &= ~(1U << PB5);
 194:	85 b1       	in	r24, 0x05	; 5
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1U << PB4);
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	80 61       	ori	r24, 0x10	; 16
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	89 e6       	ldi	r24, 0x69	; 105
 1a4:	98 e1       	ldi	r25, 0x18	; 24
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0xb6>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0xc0>
 1b0:	00 00       	nop
			_delay_ms(500);
			PORTB &= ~(1U << PB5);
 1b2:	85 b1       	in	r24, 0x05	; 5
 1b4:	8f 7d       	andi	r24, 0xDF	; 223
 1b6:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1U << PB4);
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	8f 7e       	andi	r24, 0xEF	; 239
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	89 e6       	ldi	r24, 0x69	; 105
 1c2:	98 e1       	ldi	r25, 0x18	; 24
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0xd4>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0xde>
 1ce:	00 00       	nop
 1d0:	ac cf       	rjmp	.-168    	; 0x12a <main+0x3a>
			_delay_ms(500);
			
		}
		else if (R_Indicatorflg == 0 && L_Indicatorflg == 1)
 1d2:	81 11       	cpse	r24, r1
 1d4:	23 c0       	rjmp	.+70     	; 0x21c <main+0x12c>
 1d6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1da:	91 30       	cpi	r25, 0x01	; 1
 1dc:	f9 f4       	brne	.+62     	; 0x21c <main+0x12c>
		{
			PORTB &= ~(1U << PB4);
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	8f 7e       	andi	r24, 0xEF	; 239
 1e2:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1U << PB5);
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	80 62       	ori	r24, 0x20	; 32
 1e8:	85 b9       	out	0x05, r24	; 5
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	89 e6       	ldi	r24, 0x69	; 105
 1ee:	98 e1       	ldi	r25, 0x18	; 24
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x100>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x10a>
 1fa:	00 00       	nop
			_delay_ms(500);
			PORTB &= ~(1U << PB4);
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	8f 7e       	andi	r24, 0xEF	; 239
 200:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1U << PB5);
 202:	85 b1       	in	r24, 0x05	; 5
 204:	8f 7d       	andi	r24, 0xDF	; 223
 206:	85 b9       	out	0x05, r24	; 5
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	89 e6       	ldi	r24, 0x69	; 105
 20c:	98 e1       	ldi	r25, 0x18	; 24
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x11e>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x128>
 218:	00 00       	nop
 21a:	87 cf       	rjmp	.-242    	; 0x12a <main+0x3a>
			_delay_ms(500);
			
		}
		
		
		else if(R_Indicatorflg == 0 && L_Indicatorflg == 0)
 21c:	81 11       	cpse	r24, r1
 21e:	85 cf       	rjmp	.-246    	; 0x12a <main+0x3a>
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 224:	81 11       	cpse	r24, r1
 226:	81 cf       	rjmp	.-254    	; 0x12a <main+0x3a>
		{
			PORTB &=  ~(1U << PB4) & ~(1U << PB5);
 228:	85 b1       	in	r24, 0x05	; 5
 22a:	8f 7c       	andi	r24, 0xCF	; 207
 22c:	85 b9       	out	0x05, r24	; 5
			
			PORTB &= ~(1U << PB4) & ~(1U << PB5);
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	8f 7c       	andi	r24, 0xCF	; 207
 232:	85 b9       	out	0x05, r24	; 5
 234:	7a cf       	rjmp	.-268    	; 0x12a <main+0x3a>

00000236 <__vector_18>:
    }
	return 0;
}

ISR(USART_RX_vect)
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
	receiverbuffer = UDR0;
 258:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 25c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <receiverbuffer>
	transmitterInterrupt(receiverbuffer);
 260:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <receiverbuffer>
 264:	0e 94 70 00 	call	0xe0	; 0xe0 <transmitterInterrupt>
	if(receiverbuffer == 'F')
 268:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <receiverbuffer>
 26c:	86 34       	cpi	r24, 0x46	; 70
 26e:	a1 f4       	brne	.+40     	; 0x298 <__vector_18+0x62>
	{
		F_B_flag = 1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <F_B_flag>
		R_Indicatorflg = 0;
 276:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <R_Indicatorflg>
		L_Indicatorflg = 0;
 27a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		
		PORTD |=  (1U << PD3); 
 27e:	8b b1       	in	r24, 0x0b	; 11
 280:	88 60       	ori	r24, 0x08	; 8
 282:	8b b9       	out	0x0b, r24	; 11
		PORTD |=  (1U << PD5);
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	80 62       	ori	r24, 0x20	; 32
 288:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << PD4); 
 28a:	8b b1       	in	r24, 0x0b	; 11
 28c:	8f 7e       	andi	r24, 0xEF	; 239
 28e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << PD6);	
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	8f 7b       	andi	r24, 0xBF	; 191
 294:	8b b9       	out	0x0b, r24	; 11
 296:	6a c0       	rjmp	.+212    	; 0x36c <__vector_18+0x136>
	}
	else if(receiverbuffer == 'B')
 298:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <receiverbuffer>
 29c:	82 34       	cpi	r24, 0x42	; 66
 29e:	a1 f4       	brne	.+40     	; 0x2c8 <__vector_18+0x92>
	{
		F_B_flag = 1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <F_B_flag>
		R_Indicatorflg = 0;
 2a6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <R_Indicatorflg>
		L_Indicatorflg = 0;
 2aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
		
		PORTD &= ~(1U << PD3);
 2ae:	8b b1       	in	r24, 0x0b	; 11
 2b0:	87 7f       	andi	r24, 0xF7	; 247
 2b2:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << PD5);
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	8f 7d       	andi	r24, 0xDF	; 223
 2b8:	8b b9       	out	0x0b, r24	; 11
		PORTD |=  (1U << PD4); 
 2ba:	8b b1       	in	r24, 0x0b	; 11
 2bc:	80 61       	ori	r24, 0x10	; 16
 2be:	8b b9       	out	0x0b, r24	; 11
		PORTD |=  (1U << PD6);
 2c0:	8b b1       	in	r24, 0x0b	; 11
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	8b b9       	out	0x0b, r24	; 11
 2c6:	52 c0       	rjmp	.+164    	; 0x36c <__vector_18+0x136>
		
		
	}
	else if(receiverbuffer == 'L')
 2c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <receiverbuffer>
 2cc:	8c 34       	cpi	r24, 0x4C	; 76
 2ce:	a1 f4       	brne	.+40     	; 0x2f8 <__vector_18+0xc2>
	{
		R_Indicatorflg = 0;
 2d0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <R_Indicatorflg>
		L_Indicatorflg = 1;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		F_B_flag = 0;
 2da:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <F_B_flag>
		
		PORTD |=  (1U << PD3);
 2de:	8b b1       	in	r24, 0x0b	; 11
 2e0:	88 60       	ori	r24, 0x08	; 8
 2e2:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << PD5);
 2e4:	8b b1       	in	r24, 0x0b	; 11
 2e6:	8f 7d       	andi	r24, 0xDF	; 223
 2e8:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << PD4);
 2ea:	8b b1       	in	r24, 0x0b	; 11
 2ec:	8f 7e       	andi	r24, 0xEF	; 239
 2ee:	8b b9       	out	0x0b, r24	; 11
		PORTD |=  (1U << PD6);
 2f0:	8b b1       	in	r24, 0x0b	; 11
 2f2:	80 64       	ori	r24, 0x40	; 64
 2f4:	8b b9       	out	0x0b, r24	; 11
 2f6:	3a c0       	rjmp	.+116    	; 0x36c <__vector_18+0x136>
		
		
		
	}
	else if(receiverbuffer == 'R')
 2f8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <receiverbuffer>
 2fc:	82 35       	cpi	r24, 0x52	; 82
 2fe:	a1 f4       	brne	.+40     	; 0x328 <__vector_18+0xf2>
	{
		R_Indicatorflg = 1;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <R_Indicatorflg>
		L_Indicatorflg = 0;
 306:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		F_B_flag = 0;
 30a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <F_B_flag>
		
		PORTD &= ~(1U << PD3);
 30e:	8b b1       	in	r24, 0x0b	; 11
 310:	87 7f       	andi	r24, 0xF7	; 247
 312:	8b b9       	out	0x0b, r24	; 11
		PORTD |=  (1U << PD5);
 314:	8b b1       	in	r24, 0x0b	; 11
 316:	80 62       	ori	r24, 0x20	; 32
 318:	8b b9       	out	0x0b, r24	; 11
		PORTD |=  (1U << PD4);
 31a:	8b b1       	in	r24, 0x0b	; 11
 31c:	80 61       	ori	r24, 0x10	; 16
 31e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << PD6);
 320:	8b b1       	in	r24, 0x0b	; 11
 322:	8f 7b       	andi	r24, 0xBF	; 191
 324:	8b b9       	out	0x0b, r24	; 11
 326:	22 c0       	rjmp	.+68     	; 0x36c <__vector_18+0x136>
		
		
	}
	
	
	else if(receiverbuffer == 'S')
 328:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <receiverbuffer>
 32c:	83 35       	cpi	r24, 0x53	; 83
 32e:	81 f4       	brne	.+32     	; 0x350 <__vector_18+0x11a>
	{
		F_B_flag = 1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <F_B_flag>
		PORTD &= ~(1U << PD4);
 336:	8b b1       	in	r24, 0x0b	; 11
 338:	8f 7e       	andi	r24, 0xEF	; 239
 33a:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << PD6);
 33c:	8b b1       	in	r24, 0x0b	; 11
 33e:	8f 7b       	andi	r24, 0xBF	; 191
 340:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << PD3);
 342:	8b b1       	in	r24, 0x0b	; 11
 344:	87 7f       	andi	r24, 0xF7	; 247
 346:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << PD5);
 348:	8b b1       	in	r24, 0x0b	; 11
 34a:	8f 7d       	andi	r24, 0xDF	; 223
 34c:	8b b9       	out	0x0b, r24	; 11
 34e:	0e c0       	rjmp	.+28     	; 0x36c <__vector_18+0x136>
		
	}
	else if(receiverbuffer == 'X')
 350:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <receiverbuffer>
 354:	88 35       	cpi	r24, 0x58	; 88
 356:	21 f4       	brne	.+8      	; 0x360 <__vector_18+0x12a>
	{
		H_flag = 1;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <H_flag>
 35e:	06 c0       	rjmp	.+12     	; 0x36c <__vector_18+0x136>
		
	}
	else if(receiverbuffer == 'x')
 360:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <receiverbuffer>
 364:	88 37       	cpi	r24, 0x78	; 120
 366:	11 f4       	brne	.+4      	; 0x36c <__vector_18+0x136>
	{
		H_flag = 0;
 368:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <H_flag>
		
	}
		
	
}
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	bf 91       	pop	r27
 372:	af 91       	pop	r26
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	7f 91       	pop	r23
 37a:	6f 91       	pop	r22
 37c:	5f 91       	pop	r21
 37e:	4f 91       	pop	r20
 380:	3f 91       	pop	r19
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <__vector_19>:
ISR(USART_UDRE_vect)
{
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	8f 93       	push	r24
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	UDR0 = transmitterbuffer;
 39e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <transmitterbuffer>
 3a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	UCSR0B &= ~(1U << UDRIE0);
 3a6:	e1 ec       	ldi	r30, 0xC1	; 193
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	8f 7d       	andi	r24, 0xDF	; 223
 3ae:	80 83       	st	Z, r24
	
	
}
 3b0:	ff 91       	pop	r31
 3b2:	ef 91       	pop	r30
 3b4:	8f 91       	pop	r24
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <__udivmodsi4>:
 3c0:	a1 e2       	ldi	r26, 0x21	; 33
 3c2:	1a 2e       	mov	r1, r26
 3c4:	aa 1b       	sub	r26, r26
 3c6:	bb 1b       	sub	r27, r27
 3c8:	fd 01       	movw	r30, r26
 3ca:	0d c0       	rjmp	.+26     	; 0x3e6 <__udivmodsi4_ep>

000003cc <__udivmodsi4_loop>:
 3cc:	aa 1f       	adc	r26, r26
 3ce:	bb 1f       	adc	r27, r27
 3d0:	ee 1f       	adc	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	a2 17       	cp	r26, r18
 3d6:	b3 07       	cpc	r27, r19
 3d8:	e4 07       	cpc	r30, r20
 3da:	f5 07       	cpc	r31, r21
 3dc:	20 f0       	brcs	.+8      	; 0x3e6 <__udivmodsi4_ep>
 3de:	a2 1b       	sub	r26, r18
 3e0:	b3 0b       	sbc	r27, r19
 3e2:	e4 0b       	sbc	r30, r20
 3e4:	f5 0b       	sbc	r31, r21

000003e6 <__udivmodsi4_ep>:
 3e6:	66 1f       	adc	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	88 1f       	adc	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	1a 94       	dec	r1
 3f0:	69 f7       	brne	.-38     	; 0x3cc <__udivmodsi4_loop>
 3f2:	60 95       	com	r22
 3f4:	70 95       	com	r23
 3f6:	80 95       	com	r24
 3f8:	90 95       	com	r25
 3fa:	9b 01       	movw	r18, r22
 3fc:	ac 01       	movw	r20, r24
 3fe:	bd 01       	movw	r22, r26
 400:	cf 01       	movw	r24, r30
 402:	08 95       	ret

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
