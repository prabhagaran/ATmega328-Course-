
0006b_Timer0_Phase_Corrected_PWM_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000767  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000687  00000000  00000000  00000927  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038d  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h> // AVR Standard I/O Library
#include <util/delay.h> // AVR Delay Functions Library

int main(void) {
    // Configure Timer/Counter 0 in Phase Corrected PWM mode, non-inverting
    TCCR0A |= (1 << WGM00) | (1 << COM0A1);
  80:	84 b5       	in	r24, 0x24	; 36
  82:	81 68       	ori	r24, 0x81	; 129
  84:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1 << CS01) | (1 << CS00); // Set prescaler to 64
  86:	85 b5       	in	r24, 0x25	; 37
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	85 bd       	out	0x25, r24	; 37

    // Set PD6 as output for OC0A (PWM output)
    DDRD |= (1 << PORTD6);
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	8a b9       	out	0x0a, r24	; 10

    while (1) {
        // Increase PWM duty cycle from 0% to 100%
        for (int i = 0; i <= 254; i++) {
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0b c0       	rjmp	.+22     	; 0xae <main+0x2e>
            OCR0A = i;
  98:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	30 e7       	ldi	r19, 0x70	; 112
  9e:	42 e0       	ldi	r20, 0x02	; 2
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	40 40       	sbci	r20, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2a>
  aa:	00 00       	nop
    // Set PD6 as output for OC0A (PWM output)
    DDRD |= (1 << PORTD6);

    while (1) {
        // Increase PWM duty cycle from 0% to 100%
        for (int i = 0; i <= 254; i++) {
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	8f 3f       	cpi	r24, 0xFF	; 255
  b0:	91 05       	cpc	r25, r1
  b2:	94 f3       	brlt	.-28     	; 0x98 <main+0x18>
  b4:	8e ef       	ldi	r24, 0xFE	; 254
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0b c0       	rjmp	.+22     	; 0xd0 <main+0x50>
            _delay_ms(50);
        }

        // Decrease PWM duty cycle from 100% to 0%
        for (int i = 254; i >= 0; i--) {
            OCR0A = i;
  ba:	87 bd       	out	0x27, r24	; 39
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	30 e7       	ldi	r19, 0x70	; 112
  c0:	42 e0       	ldi	r20, 0x02	; 2
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	40 40       	sbci	r20, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4c>
  cc:	00 00       	nop
            OCR0A = i;
            _delay_ms(50);
        }

        // Decrease PWM duty cycle from 100% to 0%
        for (int i = 254; i >= 0; i--) {
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	99 23       	and	r25, r25
  d2:	9c f7       	brge	.-26     	; 0xba <main+0x3a>
  d4:	de cf       	rjmp	.-68     	; 0x92 <main+0x12>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
