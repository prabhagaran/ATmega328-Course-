
0015_USART_RECEIVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000018e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000820  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000741  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  00001225  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cf  00000000  00000000  00001985  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  8e:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init>:
	 
	 /*Wait for data to be received */
	 
	 while(!(UCSR0A & (1U << RXC0))) {} 
		 return UDR0;
 }
  96:	dc 01       	movw	r26, r24
  98:	cb 01       	movw	r24, r22
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	aa 1f       	adc	r26, r26
  a0:	bb 1f       	adc	r27, r27
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	aa 1f       	adc	r26, r26
  a8:	bb 1f       	adc	r27, r27
  aa:	9c 01       	movw	r18, r24
  ac:	ad 01       	movw	r20, r26
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	44 1f       	adc	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	44 1f       	adc	r20, r20
  bc:	55 1f       	adc	r21, r21
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	74 e2       	ldi	r23, 0x24	; 36
  c2:	84 ef       	ldi	r24, 0xF4	; 244
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 a3 00 	call	0x146	; 0x146 <__udivmodsi4>
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
  ce:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d2:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  e2:	08 95       	ret

000000e4 <uart_transmit>:
  e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <uart_transmit>
  ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f0:	08 95       	ret

000000f2 <printString>:
 void printString(const char *str)
 {
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	8c 01       	movw	r16, r24
	 for(int i =0 ; str[i] != '\0';i++)
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	03 c0       	rjmp	.+6      	; 0x108 <printString+0x16>
	 {
		 
		 uart_transmit(str[i]);
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_transmit>
	 while(!(UCSR0A & (1U << RXC0))) {} 
		 return UDR0;
 }
 void printString(const char *str)
 {
	 for(int i =0 ; str[i] != '\0';i++)
 106:	21 96       	adiw	r28, 0x01	; 1
 108:	f8 01       	movw	r30, r16
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	80 81       	ld	r24, Z
 110:	81 11       	cpse	r24, r1
 112:	f7 cf       	rjmp	.-18     	; 0x102 <printString+0x10>
		 
		 uart_transmit(str[i]);
	 }
	 
	 
	 }
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <main>:
int main(void)
{
	uart_init(9600);
 11e:	60 e8       	ldi	r22, 0x80	; 128
 120:	75 e2       	ldi	r23, 0x25	; 37
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init>
	//uint8_t data;
    /* Replace with your application code */
    while (1) 
    {
		
		printString("HelloWorld..\r\n");
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 79 00 	call	0xf2	; 0xf2 <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	83 ed       	ldi	r24, 0xD3	; 211
 136:	90 e3       	ldi	r25, 0x30	; 48
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x1a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x24>
 142:	00 00       	nop
 144:	f2 cf       	rjmp	.-28     	; 0x12a <main+0xc>

00000146 <__udivmodsi4>:
 146:	a1 e2       	ldi	r26, 0x21	; 33
 148:	1a 2e       	mov	r1, r26
 14a:	aa 1b       	sub	r26, r26
 14c:	bb 1b       	sub	r27, r27
 14e:	fd 01       	movw	r30, r26
 150:	0d c0       	rjmp	.+26     	; 0x16c <__udivmodsi4_ep>

00000152 <__udivmodsi4_loop>:
 152:	aa 1f       	adc	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	ee 1f       	adc	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	a2 17       	cp	r26, r18
 15c:	b3 07       	cpc	r27, r19
 15e:	e4 07       	cpc	r30, r20
 160:	f5 07       	cpc	r31, r21
 162:	20 f0       	brcs	.+8      	; 0x16c <__udivmodsi4_ep>
 164:	a2 1b       	sub	r26, r18
 166:	b3 0b       	sbc	r27, r19
 168:	e4 0b       	sbc	r30, r20
 16a:	f5 0b       	sbc	r31, r21

0000016c <__udivmodsi4_ep>:
 16c:	66 1f       	adc	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	88 1f       	adc	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	1a 94       	dec	r1
 176:	69 f7       	brne	.-38     	; 0x152 <__udivmodsi4_loop>
 178:	60 95       	com	r22
 17a:	70 95       	com	r23
 17c:	80 95       	com	r24
 17e:	90 95       	com	r25
 180:	9b 01       	movw	r18, r22
 182:	ac 01       	movw	r20, r24
 184:	bd 01       	movw	r22, r26
 186:	cf 01       	movw	r24, r30
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
