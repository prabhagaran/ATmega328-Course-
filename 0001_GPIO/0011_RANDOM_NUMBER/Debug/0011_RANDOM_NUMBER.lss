
0011_RANDOM_NUMBER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000047e  000004f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000896  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000770  00000000  00000000  00000e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a8  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ca  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b8  00000000  00000000  00001e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002056  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	72 00       	.word	0x0072	; ????
  6a:	85 00       	.word	0x0085	; ????
  6c:	8c 00       	.word	0x008c	; ????
  6e:	9c 00       	.word	0x009c	; ????
  70:	ac 00       	.word	0x00ac	; ????
  72:	b9 00       	.word	0x00b9	; ????
  74:	c9 00       	.word	0x00c9	; ????
  76:	dc 00       	.word	0x00dc	; ????
  78:	e6 00       	.word	0x00e6	; ????
  7a:	fc 00       	.word	0x00fc	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee e7       	ldi	r30, 0x7E	; 126
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  a2:	0c 94 3d 02 	jmp	0x47a	; 0x47a <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <all_segment_off>:

#define BUTTON_PIN      PC0

void all_segment_off(void)
{
	PORTD |= (1U << SEG_A_PIN) | (1U << SEG_B_PIN) |(1U << SEG_C_PIN) | (1U << SEG_D_PIN) ;
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	80 6f       	ori	r24, 0xF0	; 240
  ae:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1U << SEG_E_PIN) | (1U << SEG_F_PIN) |(1U << SEG_G_PIN) | (1U << SEG_DP_PIN);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8f 60       	ori	r24, 0x0F	; 15
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	08 95       	ret

000000b8 <initializeIO>:
}

void initializeIO() {
	// Set buttons as inputs and enable pull-up resistors
	DDRD |= (1U << SEG_A_PIN) | (1U << SEG_B_PIN) | (1U << SEG_C_PIN) | (1U << SEG_D_PIN) ;
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	80 6f       	ori	r24, 0xF0	; 240
  bc:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1U << SEG_E_PIN) | (1U << SEG_F_PIN) | (1U << SEG_G_PIN) | (1U << SEG_DP_PIN);
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	8f 60       	ori	r24, 0x0F	; 15
  c2:	84 b9       	out	0x04, r24	; 4
	
	 DDRC &= ~(1 << BUTTON_PIN);
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	8e 7f       	andi	r24, 0xFE	; 254
  c8:	87 b9       	out	0x07, r24	; 7
	 PORTC |= (1 << BUTTON_PIN);
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	88 b9       	out	0x08, r24	; 8
  d0:	08 95       	ret

000000d2 <printNumbers>:
}
void printNumbers(int num)
{
	switch (num)
  d2:	8a 30       	cpi	r24, 0x0A	; 10
  d4:	91 05       	cpc	r25, r1
  d6:	08 f0       	brcs	.+2      	; 0xda <printNumbers+0x8>
  d8:	a1 c0       	rjmp	.+322    	; 0x21c <printNumbers+0x14a>
  da:	fc 01       	movw	r30, r24
  dc:	ec 5c       	subi	r30, 0xCC	; 204
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__tablejump2__>
	{
		case 0:
		PORTD &= ~(1U << SEG_A_PIN);
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	8f 7e       	andi	r24, 0xEF	; 239
  e8:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 7d       	andi	r24, 0xDF	; 223
  ee:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 77       	andi	r24, 0x7F	; 127
  fa:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_E_PIN);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_F_PIN);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8d 7f       	andi	r24, 0xFD	; 253
 106:	85 b9       	out	0x05, r24	; 5
		break;
 108:	08 95       	ret
		case 1:
		PORTD &= ~(1U << SEG_B_PIN);
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	8f 7d       	andi	r24, 0xDF	; 223
 10e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b b9       	out	0x0b, r24	; 11
		break;
 116:	08 95       	ret
		case 2:
		PORTD &= ~(1U << SEG_A_PIN);
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	8f 7e       	andi	r24, 0xEF	; 239
 11c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	8f 7d       	andi	r24, 0xDF	; 223
 122:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	8f 77       	andi	r24, 0x7F	; 127
 128:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_E_PIN);
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 130:	85 b1       	in	r24, 0x05	; 5
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	85 b9       	out	0x05, r24	; 5
		break;
 136:	08 95       	ret
		case 3:
		PORTD &= ~(1U << SEG_A_PIN);
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	8f 7e       	andi	r24, 0xEF	; 239
 13c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	8f 7d       	andi	r24, 0xDF	; 223
 142:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	8f 7b       	andi	r24, 0xBF	; 191
 148:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8f 77       	andi	r24, 0x7F	; 127
 14e:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_G_PIN);
 150:	85 b1       	in	r24, 0x05	; 5
 152:	8b 7f       	andi	r24, 0xFB	; 251
 154:	85 b9       	out	0x05, r24	; 5
		break;
 156:	08 95       	ret
		case 4:
		
		PORTD &= ~(1U << SEG_B_PIN);
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	8f 7d       	andi	r24, 0xDF	; 223
 15c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	8f 7b       	andi	r24, 0xBF	; 191
 162:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_F_PIN);
 164:	85 b1       	in	r24, 0x05	; 5
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	85 b9       	out	0x05, r24	; 5
		break;
 170:	08 95       	ret
		case 5:
		PORTD &= ~(1U << SEG_A_PIN);
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	8f 7e       	andi	r24, 0xEF	; 239
 176:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	8f 7b       	andi	r24, 0xBF	; 191
 17c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	8f 77       	andi	r24, 0x7F	; 127
 182:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_F_PIN);
 184:	85 b1       	in	r24, 0x05	; 5
 186:	8d 7f       	andi	r24, 0xFD	; 253
 188:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	8b 7f       	andi	r24, 0xFB	; 251
 18e:	85 b9       	out	0x05, r24	; 5
		break;
 190:	08 95       	ret
		case 6:
		//6
		PORTD &= ~(1U << SEG_A_PIN);
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	8f 7e       	andi	r24, 0xEF	; 239
 196:	8b b9       	out	0x0b, r24	; 11
		//PORTD &= ~(1U << SEG_B_PIN);
		PORTD &= ~(1U << SEG_C_PIN);
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	8f 7b       	andi	r24, 0xBF	; 191
 19c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8f 77       	andi	r24, 0x7F	; 127
 1a2:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_E_PIN);
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	8e 7f       	andi	r24, 0xFE	; 254
 1a8:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_F_PIN);
 1aa:	85 b1       	in	r24, 0x05	; 5
 1ac:	8d 7f       	andi	r24, 0xFD	; 253
 1ae:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	85 b9       	out	0x05, r24	; 5
		break;
 1b6:	08 95       	ret
		case 7:
		//7
		PORTD &= ~(1U << SEG_A_PIN);
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	8f 7e       	andi	r24, 0xEF	; 239
 1bc:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	8f 7d       	andi	r24, 0xDF	; 223
 1c2:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	8f 7b       	andi	r24, 0xBF	; 191
 1c8:	8b b9       	out	0x0b, r24	; 11
		break;
 1ca:	08 95       	ret
		case 8:
		//8
		PORTD &= ~(1U << SEG_A_PIN);
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	8f 7e       	andi	r24, 0xEF	; 239
 1d0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8f 7b       	andi	r24, 0xBF	; 191
 1dc:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	8f 77       	andi	r24, 0x7F	; 127
 1e2:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_E_PIN);
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	8e 7f       	andi	r24, 0xFE	; 254
 1e8:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_F_PIN);
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	8d 7f       	andi	r24, 0xFD	; 253
 1ee:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	8b 7f       	andi	r24, 0xFB	; 251
 1f4:	85 b9       	out	0x05, r24	; 5
		break;
 1f6:	08 95       	ret
		case 9:
		//9
		PORTD &= ~(1U << SEG_A_PIN);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	8f 7e       	andi	r24, 0xEF	; 239
 1fc:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_B_PIN);
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	8f 7d       	andi	r24, 0xDF	; 223
 202:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_C_PIN);
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	8f 7b       	andi	r24, 0xBF	; 191
 208:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1U << SEG_D_PIN);
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	8f 77       	andi	r24, 0x7F	; 127
 20e:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1U << SEG_F_PIN);
 210:	85 b1       	in	r24, 0x05	; 5
 212:	8d 7f       	andi	r24, 0xFD	; 253
 214:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1U << SEG_G_PIN);
 216:	85 b1       	in	r24, 0x05	; 5
 218:	8b 7f       	andi	r24, 0xFB	; 251
 21a:	85 b9       	out	0x05, r24	; 5
 21c:	08 95       	ret

0000021e <rollDice>:
	
}

int rollDice() {
	// Generate a random number between 1 and 6
	return (rand() % 6) + 1;
 21e:	0e 94 ca 01 	call	0x394	; 0x394 <rand>
 222:	66 e0       	ldi	r22, 0x06	; 6
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__divmodhi4>
}
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	08 95       	ret

0000022e <isButtonPressed>:
int isButtonPressed() {
	// Read the state of the button
	return !(PINC & (1 << BUTTON_PIN));
 22e:	96 b1       	in	r25, 0x06	; 6
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	89 27       	eor	r24, r25
}
 234:	81 70       	andi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	08 95       	ret

0000023a <main>:

int main(void) {
	initializeIO();
 23a:	0e 94 5c 00 	call	0xb8	; 0xb8 <initializeIO>
	srand(42); // Seed the random number generator with a fixed value
 23e:	8a e2       	ldi	r24, 0x2A	; 42
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 cf 01 	call	0x39e	; 0x39e <srand>

	while (1) {
		// Check if the button is pressed
		
		for(int i = 0; i <= 6;i++)
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	d0 e0       	ldi	r29, 0x00	; 0
 24a:	0f c0       	rjmp	.+30     	; 0x26a <main+0x30>
		{
			all_segment_off();
 24c:	0e 94 55 00 	call	0xaa	; 0xaa <all_segment_off>
			printNumbers(i);
 250:	ce 01       	movw	r24, r28
 252:	0e 94 69 00 	call	0xd2	; 0xd2 <printNumbers>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	81 ee       	ldi	r24, 0xE1	; 225
 25a:	94 e0       	ldi	r25, 0x04	; 4
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x22>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x2c>
 266:	00 00       	nop
	srand(42); // Seed the random number generator with a fixed value

	while (1) {
		// Check if the button is pressed
		
		for(int i = 0; i <= 6;i++)
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	c7 30       	cpi	r28, 0x07	; 7
 26c:	d1 05       	cpc	r29, r1
 26e:	74 f3       	brlt	.-36     	; 0x24c <main+0x12>
			all_segment_off();
			printNumbers(i);
			_delay_ms(100);
		}
		
		if (isButtonPressed()) {
 270:	0e 94 17 01 	call	0x22e	; 0x22e <isButtonPressed>
 274:	89 2b       	or	r24, r25
 276:	39 f3       	breq	.-50     	; 0x246 <main+0xc>
			// Simulate rolling the dice
			all_segment_off();
 278:	0e 94 55 00 	call	0xaa	; 0xaa <all_segment_off>
			int result = rollDice();
 27c:	0e 94 0f 01 	call	0x21e	; 0x21e <rollDice>

			// Display the result on LEDs
			printNumbers(result);
 280:	0e 94 69 00 	call	0xd2	; 0xd2 <printNumbers>
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	83 ed       	ldi	r24, 0xD3	; 211
 288:	90 e3       	ldi	r25, 0x30	; 48
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x50>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x5a>
 294:	00 00       	nop

			// Wait for a moment before allowing another roll
			_delay_ms(1000);

			// Wait for the button to be released
			while (isButtonPressed()) {}
 296:	0e 94 17 01 	call	0x22e	; 0x22e <isButtonPressed>
 29a:	89 2b       	or	r24, r25
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0x5c>
 29e:	d3 cf       	rjmp	.-90     	; 0x246 <main+0xc>

000002a0 <__divmodhi4>:
 2a0:	97 fb       	bst	r25, 7
 2a2:	07 2e       	mov	r0, r23
 2a4:	16 f4       	brtc	.+4      	; 0x2aa <__divmodhi4+0xa>
 2a6:	00 94       	com	r0
 2a8:	07 d0       	rcall	.+14     	; 0x2b8 <__divmodhi4_neg1>
 2aa:	77 fd       	sbrc	r23, 7
 2ac:	09 d0       	rcall	.+18     	; 0x2c0 <__divmodhi4_neg2>
 2ae:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__udivmodhi4>
 2b2:	07 fc       	sbrc	r0, 7
 2b4:	05 d0       	rcall	.+10     	; 0x2c0 <__divmodhi4_neg2>
 2b6:	3e f4       	brtc	.+14     	; 0x2c6 <__divmodhi4_exit>

000002b8 <__divmodhi4_neg1>:
 2b8:	90 95       	com	r25
 2ba:	81 95       	neg	r24
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	08 95       	ret

000002c0 <__divmodhi4_neg2>:
 2c0:	70 95       	com	r23
 2c2:	61 95       	neg	r22
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255

000002c6 <__divmodhi4_exit>:
 2c6:	08 95       	ret

000002c8 <__tablejump2__>:
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	05 90       	lpm	r0, Z+
 2ce:	f4 91       	lpm	r31, Z
 2d0:	e0 2d       	mov	r30, r0
 2d2:	09 94       	ijmp

000002d4 <__udivmodhi4>:
 2d4:	aa 1b       	sub	r26, r26
 2d6:	bb 1b       	sub	r27, r27
 2d8:	51 e1       	ldi	r21, 0x11	; 17
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <__udivmodhi4_ep>

000002dc <__udivmodhi4_loop>:
 2dc:	aa 1f       	adc	r26, r26
 2de:	bb 1f       	adc	r27, r27
 2e0:	a6 17       	cp	r26, r22
 2e2:	b7 07       	cpc	r27, r23
 2e4:	10 f0       	brcs	.+4      	; 0x2ea <__udivmodhi4_ep>
 2e6:	a6 1b       	sub	r26, r22
 2e8:	b7 0b       	sbc	r27, r23

000002ea <__udivmodhi4_ep>:
 2ea:	88 1f       	adc	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	5a 95       	dec	r21
 2f0:	a9 f7       	brne	.-22     	; 0x2dc <__udivmodhi4_loop>
 2f2:	80 95       	com	r24
 2f4:	90 95       	com	r25
 2f6:	bc 01       	movw	r22, r24
 2f8:	cd 01       	movw	r24, r26
 2fa:	08 95       	ret

000002fc <do_rand>:
 2fc:	8f 92       	push	r8
 2fe:	9f 92       	push	r9
 300:	af 92       	push	r10
 302:	bf 92       	push	r11
 304:	cf 92       	push	r12
 306:	df 92       	push	r13
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	ec 01       	movw	r28, r24
 312:	68 81       	ld	r22, Y
 314:	79 81       	ldd	r23, Y+1	; 0x01
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	9b 81       	ldd	r25, Y+3	; 0x03
 31a:	61 15       	cp	r22, r1
 31c:	71 05       	cpc	r23, r1
 31e:	81 05       	cpc	r24, r1
 320:	91 05       	cpc	r25, r1
 322:	21 f4       	brne	.+8      	; 0x32c <do_rand+0x30>
 324:	64 e2       	ldi	r22, 0x24	; 36
 326:	79 ed       	ldi	r23, 0xD9	; 217
 328:	8b e5       	ldi	r24, 0x5B	; 91
 32a:	97 e0       	ldi	r25, 0x07	; 7
 32c:	2d e1       	ldi	r18, 0x1D	; 29
 32e:	33 ef       	ldi	r19, 0xF3	; 243
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divmodsi4>
 338:	49 01       	movw	r8, r18
 33a:	5a 01       	movw	r10, r20
 33c:	9b 01       	movw	r18, r22
 33e:	ac 01       	movw	r20, r24
 340:	a7 ea       	ldi	r26, 0xA7	; 167
 342:	b1 e4       	ldi	r27, 0x41	; 65
 344:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__muluhisi3>
 348:	6b 01       	movw	r12, r22
 34a:	7c 01       	movw	r14, r24
 34c:	ac ee       	ldi	r26, 0xEC	; 236
 34e:	b4 ef       	ldi	r27, 0xF4	; 244
 350:	a5 01       	movw	r20, r10
 352:	94 01       	movw	r18, r8
 354:	0e 94 07 02 	call	0x40e	; 0x40e <__mulohisi3>
 358:	dc 01       	movw	r26, r24
 35a:	cb 01       	movw	r24, r22
 35c:	8c 0d       	add	r24, r12
 35e:	9d 1d       	adc	r25, r13
 360:	ae 1d       	adc	r26, r14
 362:	bf 1d       	adc	r27, r15
 364:	b7 ff       	sbrs	r27, 7
 366:	03 c0       	rjmp	.+6      	; 0x36e <do_rand+0x72>
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	a1 09       	sbc	r26, r1
 36c:	b0 48       	sbci	r27, 0x80	; 128
 36e:	88 83       	st	Y, r24
 370:	99 83       	std	Y+1, r25	; 0x01
 372:	aa 83       	std	Y+2, r26	; 0x02
 374:	bb 83       	std	Y+3, r27	; 0x03
 376:	9f 77       	andi	r25, 0x7F	; 127
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	bf 90       	pop	r11
 386:	af 90       	pop	r10
 388:	9f 90       	pop	r9
 38a:	8f 90       	pop	r8
 38c:	08 95       	ret

0000038e <rand_r>:
 38e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <do_rand>
 392:	08 95       	ret

00000394 <rand>:
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 7e 01 	call	0x2fc	; 0x2fc <do_rand>
 39c:	08 95       	ret

0000039e <srand>:
 39e:	a0 e0       	ldi	r26, 0x00	; 0
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3aa:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3ae:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 3b2:	08 95       	ret

000003b4 <__divmodsi4>:
 3b4:	05 2e       	mov	r0, r21
 3b6:	97 fb       	bst	r25, 7
 3b8:	1e f4       	brtc	.+6      	; 0x3c0 <__divmodsi4+0xc>
 3ba:	00 94       	com	r0
 3bc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__negsi2>
 3c0:	57 fd       	sbrc	r21, 7
 3c2:	07 d0       	rcall	.+14     	; 0x3d2 <__divmodsi4_neg2>
 3c4:	0e 94 0c 02 	call	0x418	; 0x418 <__udivmodsi4>
 3c8:	07 fc       	sbrc	r0, 7
 3ca:	03 d0       	rcall	.+6      	; 0x3d2 <__divmodsi4_neg2>
 3cc:	4e f4       	brtc	.+18     	; 0x3e0 <__divmodsi4_exit>
 3ce:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__negsi2>

000003d2 <__divmodsi4_neg2>:
 3d2:	50 95       	com	r21
 3d4:	40 95       	com	r20
 3d6:	30 95       	com	r19
 3d8:	21 95       	neg	r18
 3da:	3f 4f       	sbci	r19, 0xFF	; 255
 3dc:	4f 4f       	sbci	r20, 0xFF	; 255
 3de:	5f 4f       	sbci	r21, 0xFF	; 255

000003e0 <__divmodsi4_exit>:
 3e0:	08 95       	ret

000003e2 <__negsi2>:
 3e2:	90 95       	com	r25
 3e4:	80 95       	com	r24
 3e6:	70 95       	com	r23
 3e8:	61 95       	neg	r22
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	8f 4f       	sbci	r24, 0xFF	; 255
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	08 95       	ret

000003f2 <__muluhisi3>:
 3f2:	0e 94 2e 02 	call	0x45c	; 0x45c <__umulhisi3>
 3f6:	a5 9f       	mul	r26, r21
 3f8:	90 0d       	add	r25, r0
 3fa:	b4 9f       	mul	r27, r20
 3fc:	90 0d       	add	r25, r0
 3fe:	a4 9f       	mul	r26, r20
 400:	80 0d       	add	r24, r0
 402:	91 1d       	adc	r25, r1
 404:	11 24       	eor	r1, r1
 406:	08 95       	ret

00000408 <__mulshisi3>:
 408:	b7 ff       	sbrs	r27, 7
 40a:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__muluhisi3>

0000040e <__mulohisi3>:
 40e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__muluhisi3>
 412:	82 1b       	sub	r24, r18
 414:	93 0b       	sbc	r25, r19
 416:	08 95       	ret

00000418 <__udivmodsi4>:
 418:	a1 e2       	ldi	r26, 0x21	; 33
 41a:	1a 2e       	mov	r1, r26
 41c:	aa 1b       	sub	r26, r26
 41e:	bb 1b       	sub	r27, r27
 420:	fd 01       	movw	r30, r26
 422:	0d c0       	rjmp	.+26     	; 0x43e <__udivmodsi4_ep>

00000424 <__udivmodsi4_loop>:
 424:	aa 1f       	adc	r26, r26
 426:	bb 1f       	adc	r27, r27
 428:	ee 1f       	adc	r30, r30
 42a:	ff 1f       	adc	r31, r31
 42c:	a2 17       	cp	r26, r18
 42e:	b3 07       	cpc	r27, r19
 430:	e4 07       	cpc	r30, r20
 432:	f5 07       	cpc	r31, r21
 434:	20 f0       	brcs	.+8      	; 0x43e <__udivmodsi4_ep>
 436:	a2 1b       	sub	r26, r18
 438:	b3 0b       	sbc	r27, r19
 43a:	e4 0b       	sbc	r30, r20
 43c:	f5 0b       	sbc	r31, r21

0000043e <__udivmodsi4_ep>:
 43e:	66 1f       	adc	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	88 1f       	adc	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	1a 94       	dec	r1
 448:	69 f7       	brne	.-38     	; 0x424 <__udivmodsi4_loop>
 44a:	60 95       	com	r22
 44c:	70 95       	com	r23
 44e:	80 95       	com	r24
 450:	90 95       	com	r25
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
 456:	bd 01       	movw	r22, r26
 458:	cf 01       	movw	r24, r30
 45a:	08 95       	ret

0000045c <__umulhisi3>:
 45c:	a2 9f       	mul	r26, r18
 45e:	b0 01       	movw	r22, r0
 460:	b3 9f       	mul	r27, r19
 462:	c0 01       	movw	r24, r0
 464:	a3 9f       	mul	r26, r19
 466:	70 0d       	add	r23, r0
 468:	81 1d       	adc	r24, r1
 46a:	11 24       	eor	r1, r1
 46c:	91 1d       	adc	r25, r1
 46e:	b2 9f       	mul	r27, r18
 470:	70 0d       	add	r23, r0
 472:	81 1d       	adc	r24, r1
 474:	11 24       	eor	r1, r1
 476:	91 1d       	adc	r25, r1
 478:	08 95       	ret

0000047a <_exit>:
 47a:	f8 94       	cli

0000047c <__stop_program>:
 47c:	ff cf       	rjmp	.-2      	; 0x47c <__stop_program>
