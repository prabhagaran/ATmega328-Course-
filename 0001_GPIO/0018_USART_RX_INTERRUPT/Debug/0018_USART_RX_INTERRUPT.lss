
0018_USART_RX_INTERRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007cb  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f5  00000000  00000000  00000aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ec  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ba  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ca  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  88:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <uartInit>:
uint8_t receiverbuffer;

// Function to initialize UART communication with specified baud rate
void uartInit(uint32_t baudRate)
{
    uint16_t ubrr = (F_CPU / ( 16 * baudRate)) - 1;
  90:	dc 01       	movw	r26, r24
  92:	cb 01       	movw	r24, r22
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	aa 1f       	adc	r26, r26
  9a:	bb 1f       	adc	r27, r27
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	aa 1f       	adc	r26, r26
  a2:	bb 1f       	adc	r27, r27
  a4:	9c 01       	movw	r18, r24
  a6:	ad 01       	movw	r20, r26
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	44 1f       	adc	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	44 1f       	adc	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	74 e2       	ldi	r23, 0x24	; 36
  bc:	84 ef       	ldi	r24, 0xF4	; 244
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 bd 00 	call	0x17a	; 0x17a <__udivmodsi4>
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	31 09       	sbc	r19, r1
    
    UBRR0H = (uint8_t)(ubrr >> 8);
  c8:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (uint8_t)ubrr;
  cc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    
    // Set data frame
    UCSR0C = (1U << UCSZ01) | (1 << UCSZ00);
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    
    // Enable Receiver and Transmitter
    UCSR0B = (1U << TXEN0) | (1U << RXEN0);
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    
    sei(); // Enable global interrupts
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <main>:
}

int main(void)
{
    /* Replace with your application code */
    DDRB |= (1U << PB5); // Set PB5 as output for LED
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1U << PB4); // Set PB4 as output for debugging
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	84 b9       	out	0x04, r24	; 4
    
    uartInit(9600); // Initialize UART with baud rate of 9600
  ec:	60 e8       	ldi	r22, 0x80	; 128
  ee:	75 e2       	ldi	r23, 0x25	; 37
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 48 00 	call	0x90	; 0x90 <uartInit>
    
    UCSR0B |= (1U << RXCIE0); // Enable USART RX Complete Interrupt
  f8:	e1 ec       	ldi	r30, 0xC1	; 193
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
    
    while (1) 
    {
        PORTB |= (1U << PB4); // Toggle PB4 for debugging
 102:	85 b1       	in	r24, 0x05	; 5
 104:	80 61       	ori	r24, 0x10	; 16
 106:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	89 e6       	ldi	r24, 0x69	; 105
 10c:	98 e1       	ldi	r25, 0x18	; 24
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x2e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x38>
 118:	00 00       	nop
        _delay_ms(500);
        PORTB &= ~(1U << PB4);
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	85 b9       	out	0x05, r24	; 5
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	89 e6       	ldi	r24, 0x69	; 105
 124:	98 e1       	ldi	r25, 0x18	; 24
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x46>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x50>
 130:	00 00       	nop
 132:	e7 cf       	rjmp	.-50     	; 0x102 <main+0x22>

00000134 <__vector_18>:
    return 0;
}

// USART RX Complete Interrupt Service Routine
ISR(USART_RX_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
    receiverbuffer = UDR0; // Read received data
 144:	e6 ec       	ldi	r30, 0xC6	; 198
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    
    UDR0 = receiverbuffer; // Echo back received data
 14e:	80 83       	st	Z, r24
    
    // Toggle LED based on received characters
    if (receiverbuffer == '1')
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	81 33       	cpi	r24, 0x31	; 49
 156:	21 f4       	brne	.+8      	; 0x160 <__vector_18+0x2c>
    {
        PORTB |= (1U << PB5); // Turn on LED
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	85 b9       	out	0x05, r24	; 5
 15e:	05 c0       	rjmp	.+10     	; 0x16a <__vector_18+0x36>
    }
    else if (receiverbuffer == '0')
 160:	80 33       	cpi	r24, 0x30	; 48
 162:	19 f4       	brne	.+6      	; 0x16a <__vector_18+0x36>
    {
        PORTB &= ~(1U << PB5); // Turn off LED
 164:	85 b1       	in	r24, 0x05	; 5
 166:	8f 7d       	andi	r24, 0xDF	; 223
 168:	85 b9       	out	0x05, r24	; 5
    }
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__udivmodsi4>:
 17a:	a1 e2       	ldi	r26, 0x21	; 33
 17c:	1a 2e       	mov	r1, r26
 17e:	aa 1b       	sub	r26, r26
 180:	bb 1b       	sub	r27, r27
 182:	fd 01       	movw	r30, r26
 184:	0d c0       	rjmp	.+26     	; 0x1a0 <__udivmodsi4_ep>

00000186 <__udivmodsi4_loop>:
 186:	aa 1f       	adc	r26, r26
 188:	bb 1f       	adc	r27, r27
 18a:	ee 1f       	adc	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	a2 17       	cp	r26, r18
 190:	b3 07       	cpc	r27, r19
 192:	e4 07       	cpc	r30, r20
 194:	f5 07       	cpc	r31, r21
 196:	20 f0       	brcs	.+8      	; 0x1a0 <__udivmodsi4_ep>
 198:	a2 1b       	sub	r26, r18
 19a:	b3 0b       	sbc	r27, r19
 19c:	e4 0b       	sbc	r30, r20
 19e:	f5 0b       	sbc	r31, r21

000001a0 <__udivmodsi4_ep>:
 1a0:	66 1f       	adc	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	88 1f       	adc	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	1a 94       	dec	r1
 1aa:	69 f7       	brne	.-38     	; 0x186 <__udivmodsi4_loop>
 1ac:	60 95       	com	r22
 1ae:	70 95       	com	r23
 1b0:	80 95       	com	r24
 1b2:	90 95       	com	r25
 1b4:	9b 01       	movw	r18, r22
 1b6:	ac 01       	movw	r20, r24
 1b8:	bd 01       	movw	r22, r26
 1ba:	cf 01       	movw	r24, r30
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
